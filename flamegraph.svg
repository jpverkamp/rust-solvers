<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="5436"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.02%)</title><rect x="0.0000%" y="293" width="0.0184%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.02%)</title><rect x="0.0000%" y="277" width="0.0184%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>sokobond-express`&lt;solver::Solver&lt;GlobalState,LocalState,Step&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.0184%" y="229" width="0.0184%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2684%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (6 samples, 0.11%)</title><rect x="0.0368%" y="213" width="0.1104%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="6"/><text x="0.2868%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.13%)</title><rect x="0.1472%" y="213" width="0.1288%" height="15" fill="rgb(208,68,35)" fg:x="8" fg:w="7"/><text x="0.3972%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.04%)</title><rect x="0.2759%" y="213" width="0.0368%" height="15" fill="rgb(232,128,0)" fg:x="15" fg:w="2"/><text x="0.5259%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="0.2943%" y="197" width="0.0184%" height="15" fill="rgb(207,160,47)" fg:x="16" fg:w="1"/><text x="0.5443%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="0.3127%" y="213" width="0.0184%" height="15" fill="rgb(228,23,34)" fg:x="17" fg:w="1"/><text x="0.5627%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="0.3311%" y="213" width="0.0184%" height="15" fill="rgb(218,30,26)" fg:x="18" fg:w="1"/><text x="0.5811%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="0.3495%" y="213" width="0.0552%" height="15" fill="rgb(220,122,19)" fg:x="19" fg:w="3"/><text x="0.5995%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (71 samples, 1.31%)</title><rect x="0.4047%" y="213" width="1.3061%" height="15" fill="rgb(250,228,42)" fg:x="22" fg:w="71"/><text x="0.6547%" y="223.50"></text></g><g><title>sokobond-express`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (29 samples, 0.53%)</title><rect x="1.7108%" y="213" width="0.5335%" height="15" fill="rgb(240,193,28)" fg:x="93" fg:w="29"/><text x="1.9608%" y="223.50"></text></g><g><title>sokobond-express`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.11%)</title><rect x="2.2443%" y="213" width="0.1104%" height="15" fill="rgb(216,20,37)" fg:x="122" fg:w="6"/><text x="2.4943%" y="223.50"></text></g><g><title>sokobond-express`&lt;sokobond_express::Local as solver::State&lt;sokobond_express::Global,sokobond_express::Step&gt;&gt;::heuristic (2 samples, 0.04%)</title><rect x="2.3547%" y="213" width="0.0368%" height="15" fill="rgb(206,188,39)" fg:x="128" fg:w="2"/><text x="2.6047%" y="223.50"></text></g><g><title>sokobond-express`&lt;sokobond_express::Local as solver::State&lt;sokobond_express::Global,sokobond_express::Step&gt;&gt;::is_solved (1 samples, 0.02%)</title><rect x="2.3915%" y="213" width="0.0184%" height="15" fill="rgb(217,207,13)" fg:x="130" fg:w="1"/><text x="2.6415%" y="223.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (1 samples, 0.02%)</title><rect x="5.2612%" y="197" width="0.0184%" height="15" fill="rgb(231,73,38)" fg:x="286" fg:w="1"/><text x="5.5112%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (1 samples, 0.02%)</title><rect x="5.2796%" y="197" width="0.0184%" height="15" fill="rgb(225,20,46)" fg:x="287" fg:w="1"/><text x="5.5296%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (9 samples, 0.17%)</title><rect x="5.2980%" y="197" width="0.1656%" height="15" fill="rgb(210,31,41)" fg:x="288" fg:w="9"/><text x="5.5480%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (35 samples, 0.64%)</title><rect x="5.4636%" y="197" width="0.6439%" height="15" fill="rgb(221,200,47)" fg:x="297" fg:w="35"/><text x="5.7136%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.11%)</title><rect x="6.1074%" y="197" width="0.1104%" height="15" fill="rgb(226,26,5)" fg:x="332" fg:w="6"/><text x="6.3574%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.04%)</title><rect x="6.2178%" y="197" width="0.0368%" height="15" fill="rgb(249,33,26)" fg:x="338" fg:w="2"/><text x="6.4678%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.04%)</title><rect x="6.3834%" y="165" width="0.0368%" height="15" fill="rgb(235,183,28)" fg:x="347" fg:w="2"/><text x="6.6334%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.18%)</title><rect x="6.2546%" y="197" width="0.1840%" height="15" fill="rgb(221,5,38)" fg:x="340" fg:w="10"/><text x="6.5046%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.11%)</title><rect x="6.3282%" y="181" width="0.1104%" height="15" fill="rgb(247,18,42)" fg:x="344" fg:w="6"/><text x="6.5782%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="6.4202%" y="165" width="0.0184%" height="15" fill="rgb(241,131,45)" fg:x="349" fg:w="1"/><text x="6.6702%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (54 samples, 0.99%)</title><rect x="6.4386%" y="197" width="0.9934%" height="15" fill="rgb(249,31,29)" fg:x="350" fg:w="54"/><text x="6.6886%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2 samples, 0.04%)</title><rect x="7.5239%" y="181" width="0.0368%" height="15" fill="rgb(225,111,53)" fg:x="409" fg:w="2"/><text x="7.7739%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.11%)</title><rect x="7.5607%" y="181" width="0.1104%" height="15" fill="rgb(238,160,17)" fg:x="411" fg:w="6"/><text x="7.8107%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.07%)</title><rect x="7.7447%" y="165" width="0.0736%" height="15" fill="rgb(214,148,48)" fg:x="421" fg:w="4"/><text x="7.9947%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (43 samples, 0.79%)</title><rect x="7.4319%" y="197" width="0.7910%" height="15" fill="rgb(232,36,49)" fg:x="404" fg:w="43"/><text x="7.6819%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (30 samples, 0.55%)</title><rect x="7.6711%" y="181" width="0.5519%" height="15" fill="rgb(209,103,24)" fg:x="417" fg:w="30"/><text x="7.9211%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (22 samples, 0.40%)</title><rect x="7.8182%" y="165" width="0.4047%" height="15" fill="rgb(229,88,8)" fg:x="425" fg:w="22"/><text x="8.0682%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.06%)</title><rect x="8.1678%" y="149" width="0.0552%" height="15" fill="rgb(213,181,19)" fg:x="444" fg:w="3"/><text x="8.4178%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="8.2230%" y="197" width="0.0184%" height="15" fill="rgb(254,191,54)" fg:x="447" fg:w="1"/><text x="8.4730%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.07%)</title><rect x="8.2414%" y="197" width="0.0736%" height="15" fill="rgb(241,83,37)" fg:x="448" fg:w="4"/><text x="8.4914%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (42 samples, 0.77%)</title><rect x="8.3149%" y="197" width="0.7726%" height="15" fill="rgb(233,36,39)" fg:x="452" fg:w="42"/><text x="8.5649%" y="207.50"></text></g><g><title>sokobond-express`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.02%)</title><rect x="9.0876%" y="197" width="0.0184%" height="15" fill="rgb(226,3,54)" fg:x="494" fg:w="1"/><text x="9.3376%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (182 samples, 3.35%)</title><rect x="9.8970%" y="181" width="3.3481%" height="15" fill="rgb(245,192,40)" fg:x="538" fg:w="182"/><text x="10.1470%" y="191.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (131 samples, 2.41%)</title><rect x="10.8352%" y="165" width="2.4099%" height="15" fill="rgb(238,167,29)" fg:x="589" fg:w="131"/><text x="11.0852%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.09%)</title><rect x="13.1531%" y="149" width="0.0920%" height="15" fill="rgb(232,182,51)" fg:x="715" fg:w="5"/><text x="13.4031%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="13.2450%" y="165" width="0.0184%" height="15" fill="rgb(231,60,39)" fg:x="720" fg:w="1"/><text x="13.4950%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="13.2634%" y="149" width="0.0184%" height="15" fill="rgb(208,69,12)" fg:x="721" fg:w="1"/><text x="13.5134%" y="159.50"></text></g><g><title>sokobond-express`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (232 samples, 4.27%)</title><rect x="9.1060%" y="197" width="4.2678%" height="15" fill="rgb(235,93,37)" fg:x="495" fg:w="232"/><text x="9.3560%" y="207.50">sokob..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.13%)</title><rect x="13.2450%" y="181" width="0.1288%" height="15" fill="rgb(213,116,39)" fg:x="720" fg:w="7"/><text x="13.4950%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.11%)</title><rect x="13.2634%" y="165" width="0.1104%" height="15" fill="rgb(222,207,29)" fg:x="721" fg:w="6"/><text x="13.5134%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.09%)</title><rect x="13.2818%" y="149" width="0.0920%" height="15" fill="rgb(206,96,30)" fg:x="722" fg:w="5"/><text x="13.5318%" y="159.50"></text></g><g><title>sokobond-express`&lt;sokobond_express::Local as solver::State&lt;sokobond_express::Global,sokobond_express::Step&gt;&gt;::heuristic (4 samples, 0.07%)</title><rect x="13.3738%" y="197" width="0.0736%" height="15" fill="rgb(218,138,4)" fg:x="727" fg:w="4"/><text x="13.6238%" y="207.50"></text></g><g><title>sokobond-express`&lt;sokobond_express::Local as solver::State&lt;sokobond_express::Global,sokobond_express::Step&gt;&gt;::is_solved (5 samples, 0.09%)</title><rect x="13.4474%" y="197" width="0.0920%" height="15" fill="rgb(250,191,14)" fg:x="731" fg:w="5"/><text x="13.6974%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.15%)</title><rect x="40.1582%" y="181" width="0.1472%" height="15" fill="rgb(239,60,40)" fg:x="2183" fg:w="8"/><text x="40.4082%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.04%)</title><rect x="40.3054%" y="181" width="0.0368%" height="15" fill="rgb(206,27,48)" fg:x="2191" fg:w="2"/><text x="40.5554%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.06%)</title><rect x="40.3422%" y="181" width="0.0552%" height="15" fill="rgb(225,35,8)" fg:x="2193" fg:w="3"/><text x="40.5922%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.02%)</title><rect x="40.3790%" y="165" width="0.0184%" height="15" fill="rgb(250,213,24)" fg:x="2195" fg:w="1"/><text x="40.6290%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.02%)</title><rect x="40.4341%" y="165" width="0.0184%" height="15" fill="rgb(247,123,22)" fg:x="2198" fg:w="1"/><text x="40.6841%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.15%)</title><rect x="40.3974%" y="181" width="0.1472%" height="15" fill="rgb(231,138,38)" fg:x="2196" fg:w="8"/><text x="40.6474%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.09%)</title><rect x="40.4525%" y="165" width="0.0920%" height="15" fill="rgb(231,145,46)" fg:x="2199" fg:w="5"/><text x="40.7025%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="40.5261%" y="149" width="0.0184%" height="15" fill="rgb(251,118,11)" fg:x="2203" fg:w="1"/><text x="40.7761%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="40.5445%" y="181" width="0.0184%" height="15" fill="rgb(217,147,25)" fg:x="2204" fg:w="1"/><text x="40.7945%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.09%)</title><rect x="40.5629%" y="181" width="0.0920%" height="15" fill="rgb(247,81,37)" fg:x="2205" fg:w="5"/><text x="40.8129%" y="191.50"></text></g><g><title>sokobond-express`&lt;sokobond_express::Local as solver::State&lt;sokobond_express::Global,sokobond_express::Step&gt;&gt;::is_solved (6 samples, 0.11%)</title><rect x="40.6549%" y="181" width="0.1104%" height="15" fill="rgb(209,12,38)" fg:x="2210" fg:w="6"/><text x="40.9049%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.06%)</title><rect x="40.9676%" y="165" width="0.0552%" height="15" fill="rgb(227,1,9)" fg:x="2227" fg:w="3"/><text x="41.2176%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.04%)</title><rect x="41.0228%" y="165" width="0.0368%" height="15" fill="rgb(248,47,43)" fg:x="2230" fg:w="2"/><text x="41.2728%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="41.0596%" y="165" width="0.0184%" height="15" fill="rgb(221,10,30)" fg:x="2232" fg:w="1"/><text x="41.3096%" y="175.50"></text></g><g><title>sokobond-express`DYLD-STUB$$realloc (1 samples, 0.02%)</title><rect x="41.0780%" y="165" width="0.0184%" height="15" fill="rgb(210,229,1)" fg:x="2233" fg:w="1"/><text x="41.3280%" y="175.50"></text></g><g><title>sokobond-express`__rdl_realloc (1 samples, 0.02%)</title><rect x="41.0964%" y="165" width="0.0184%" height="15" fill="rgb(222,148,37)" fg:x="2234" fg:w="1"/><text x="41.3464%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 0.06%)</title><rect x="41.1148%" y="149" width="0.0552%" height="15" fill="rgb(234,67,33)" fg:x="2235" fg:w="3"/><text x="41.3648%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.02%)</title><rect x="41.3907%" y="117" width="0.0184%" height="15" fill="rgb(247,98,35)" fg:x="2250" fg:w="1"/><text x="41.6407%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.06%)</title><rect x="41.4091%" y="117" width="0.0552%" height="15" fill="rgb(247,138,52)" fg:x="2251" fg:w="3"/><text x="41.6591%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.28%)</title><rect x="41.4643%" y="117" width="0.2759%" height="15" fill="rgb(213,79,30)" fg:x="2254" fg:w="15"/><text x="41.7143%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.17%)</title><rect x="41.7403%" y="117" width="0.1656%" height="15" fill="rgb(246,177,23)" fg:x="2269" fg:w="9"/><text x="41.9903%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 0.22%)</title><rect x="41.9610%" y="101" width="0.2208%" height="15" fill="rgb(230,62,27)" fg:x="2281" fg:w="12"/><text x="42.2110%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (9 samples, 0.17%)</title><rect x="42.1818%" y="101" width="0.1656%" height="15" fill="rgb(216,154,8)" fg:x="2293" fg:w="9"/><text x="42.4318%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (7 samples, 0.13%)</title><rect x="42.2185%" y="85" width="0.1288%" height="15" fill="rgb(244,35,45)" fg:x="2295" fg:w="7"/><text x="42.4685%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.02%)</title><rect x="42.3473%" y="85" width="0.0184%" height="15" fill="rgb(251,115,12)" fg:x="2302" fg:w="1"/><text x="42.5973%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="42.3657%" y="85" width="0.0184%" height="15" fill="rgb(240,54,50)" fg:x="2303" fg:w="1"/><text x="42.6157%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.11%)</title><rect x="42.3473%" y="101" width="0.1104%" height="15" fill="rgb(233,84,52)" fg:x="2302" fg:w="6"/><text x="42.5973%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.07%)</title><rect x="42.3841%" y="85" width="0.0736%" height="15" fill="rgb(207,117,47)" fg:x="2304" fg:w="4"/><text x="42.6341%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.06%)</title><rect x="42.4025%" y="69" width="0.0552%" height="15" fill="rgb(249,43,39)" fg:x="2305" fg:w="3"/><text x="42.6525%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.06%)</title><rect x="42.4025%" y="53" width="0.0552%" height="15" fill="rgb(209,38,44)" fg:x="2305" fg:w="3"/><text x="42.6525%" y="63.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="42.4577%" y="101" width="0.0184%" height="15" fill="rgb(236,212,23)" fg:x="2308" fg:w="1"/><text x="42.7077%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (35 samples, 0.64%)</title><rect x="41.9058%" y="117" width="0.6439%" height="15" fill="rgb(242,79,21)" fg:x="2278" fg:w="35"/><text x="42.1558%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.07%)</title><rect x="42.4761%" y="101" width="0.0736%" height="15" fill="rgb(211,96,35)" fg:x="2309" fg:w="4"/><text x="42.7261%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.02%)</title><rect x="42.5497%" y="117" width="0.0184%" height="15" fill="rgb(253,215,40)" fg:x="2313" fg:w="1"/><text x="42.7997%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="42.5497%" y="101" width="0.0184%" height="15" fill="rgb(211,81,21)" fg:x="2313" fg:w="1"/><text x="42.7997%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="42.5497%" y="85" width="0.0184%" height="15" fill="rgb(208,190,38)" fg:x="2313" fg:w="1"/><text x="42.7997%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (89 samples, 1.64%)</title><rect x="41.2252%" y="133" width="1.6372%" height="15" fill="rgb(235,213,38)" fg:x="2241" fg:w="89"/><text x="41.4752%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.29%)</title><rect x="42.5681%" y="117" width="0.2943%" height="15" fill="rgb(237,122,38)" fg:x="2314" fg:w="16"/><text x="42.8181%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (3 samples, 0.06%)</title><rect x="42.8624%" y="133" width="0.0552%" height="15" fill="rgb(244,218,35)" fg:x="2330" fg:w="3"/><text x="43.1124%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (96 samples, 1.77%)</title><rect x="41.1700%" y="149" width="1.7660%" height="15" fill="rgb(240,68,47)" fg:x="2238" fg:w="96"/><text x="41.4200%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="42.9176%" y="133" width="0.0184%" height="15" fill="rgb(210,16,53)" fg:x="2333" fg:w="1"/><text x="43.1676%" y="143.50"></text></g><g><title>sokobond-express`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (131 samples, 2.41%)</title><rect x="40.7653%" y="181" width="2.4099%" height="15" fill="rgb(235,124,12)" fg:x="2216" fg:w="131"/><text x="41.0153%" y="191.50">so..</text></g><g><title>sokobond-express`alloc::raw_vec::finish_grow (112 samples, 2.06%)</title><rect x="41.1148%" y="165" width="2.0603%" height="15" fill="rgb(224,169,11)" fg:x="2235" fg:w="112"/><text x="41.3648%" y="175.50">s..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (13 samples, 0.24%)</title><rect x="42.9360%" y="149" width="0.2391%" height="15" fill="rgb(250,166,2)" fg:x="2334" fg:w="13"/><text x="43.1860%" y="159.50"></text></g><g><title>sokobond-express`&lt;sokobond_express::Local as solver::State&lt;sokobond_express::Global,sokobond_express::Step&gt;&gt;::is_valid (1,613 samples, 29.67%)</title><rect x="13.5394%" y="197" width="29.6726%" height="15" fill="rgb(242,216,29)" fg:x="736" fg:w="1613"/><text x="13.7894%" y="207.50">sokobond-express`&lt;sokobond_express::Local as sol..</text></g><g><title>sokobond-express`alloc::raw_vec::finish_grow (2 samples, 0.04%)</title><rect x="43.1751%" y="181" width="0.0368%" height="15" fill="rgb(230,116,27)" fg:x="2347" fg:w="2"/><text x="43.4251%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (7 samples, 0.13%)</title><rect x="43.5798%" y="181" width="0.1288%" height="15" fill="rgb(228,99,48)" fg:x="2369" fg:w="7"/><text x="43.8298%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.24%)</title><rect x="43.7086%" y="181" width="0.2391%" height="15" fill="rgb(253,11,6)" fg:x="2376" fg:w="13"/><text x="43.9586%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="43.9478%" y="181" width="0.0368%" height="15" fill="rgb(247,143,39)" fg:x="2389" fg:w="2"/><text x="44.1978%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="43.9845%" y="181" width="0.0184%" height="15" fill="rgb(236,97,10)" fg:x="2391" fg:w="1"/><text x="44.2345%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="44.0029%" y="181" width="0.0184%" height="15" fill="rgb(233,208,19)" fg:x="2392" fg:w="1"/><text x="44.2529%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (36 samples, 0.66%)</title><rect x="44.0213%" y="181" width="0.6623%" height="15" fill="rgb(216,164,2)" fg:x="2393" fg:w="36"/><text x="44.2713%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2 samples, 0.04%)</title><rect x="44.7204%" y="165" width="0.0368%" height="15" fill="rgb(220,129,5)" fg:x="2431" fg:w="2"/><text x="44.9704%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.02%)</title><rect x="44.7940%" y="149" width="0.0184%" height="15" fill="rgb(242,17,10)" fg:x="2435" fg:w="1"/><text x="45.0440%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.07%)</title><rect x="44.8124%" y="149" width="0.0736%" height="15" fill="rgb(242,107,0)" fg:x="2436" fg:w="4"/><text x="45.0624%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.06%)</title><rect x="45.2171%" y="133" width="0.0552%" height="15" fill="rgb(251,28,31)" fg:x="2458" fg:w="3"/><text x="45.4671%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (43 samples, 0.79%)</title><rect x="44.6836%" y="181" width="0.7910%" height="15" fill="rgb(233,223,10)" fg:x="2429" fg:w="43"/><text x="44.9336%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (39 samples, 0.72%)</title><rect x="44.7572%" y="165" width="0.7174%" height="15" fill="rgb(215,21,27)" fg:x="2433" fg:w="39"/><text x="45.0072%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (32 samples, 0.59%)</title><rect x="44.8859%" y="149" width="0.5887%" height="15" fill="rgb(232,23,21)" fg:x="2440" fg:w="32"/><text x="45.1359%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.20%)</title><rect x="45.2723%" y="133" width="0.2024%" height="15" fill="rgb(244,5,23)" fg:x="2461" fg:w="11"/><text x="45.5223%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="45.4746%" y="181" width="0.0184%" height="15" fill="rgb(226,81,46)" fg:x="2472" fg:w="1"/><text x="45.7246%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (19 samples, 0.35%)</title><rect x="45.4930%" y="181" width="0.3495%" height="15" fill="rgb(247,70,30)" fg:x="2473" fg:w="19"/><text x="45.7430%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (33 samples, 0.61%)</title><rect x="46.1737%" y="165" width="0.6071%" height="15" fill="rgb(212,68,19)" fg:x="2510" fg:w="33"/><text x="46.4237%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (28 samples, 0.52%)</title><rect x="46.2656%" y="149" width="0.5151%" height="15" fill="rgb(240,187,13)" fg:x="2515" fg:w="28"/><text x="46.5156%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="46.7623%" y="133" width="0.0184%" height="15" fill="rgb(223,113,26)" fg:x="2542" fg:w="1"/><text x="47.0123%" y="143.50"></text></g><g><title>sokobond-express`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (54 samples, 0.99%)</title><rect x="45.8425%" y="181" width="0.9934%" height="15" fill="rgb(206,192,2)" fg:x="2492" fg:w="54"/><text x="46.0925%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="46.7807%" y="165" width="0.0552%" height="15" fill="rgb(241,108,4)" fg:x="2543" fg:w="3"/><text x="47.0307%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.06%)</title><rect x="46.7807%" y="149" width="0.0552%" height="15" fill="rgb(247,173,49)" fg:x="2543" fg:w="3"/><text x="47.0307%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.04%)</title><rect x="46.7991%" y="133" width="0.0368%" height="15" fill="rgb(224,114,35)" fg:x="2544" fg:w="2"/><text x="47.0491%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="46.8175%" y="117" width="0.0184%" height="15" fill="rgb(245,159,27)" fg:x="2545" fg:w="1"/><text x="47.0675%" y="127.50"></text></g><g><title>sokobond-express`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="46.8359%" y="181" width="0.0368%" height="15" fill="rgb(245,172,44)" fg:x="2546" fg:w="2"/><text x="47.0859%" y="191.50"></text></g><g><title>sokobond-express`&lt;solver::direction::Direction as core::convert::From&lt;solver::point::Point&gt;&gt;::from (23 samples, 0.42%)</title><rect x="46.8727%" y="181" width="0.4231%" height="15" fill="rgb(236,23,11)" fg:x="2548" fg:w="23"/><text x="47.1227%" y="191.50"></text></g><g><title>sokobond-express`DYLD-STUB$$malloc (5 samples, 0.09%)</title><rect x="47.2958%" y="181" width="0.0920%" height="15" fill="rgb(205,117,38)" fg:x="2571" fg:w="5"/><text x="47.5458%" y="191.50"></text></g><g><title>sokobond-express`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="47.3878%" y="181" width="0.0184%" height="15" fill="rgb(237,72,25)" fg:x="2576" fg:w="1"/><text x="47.6378%" y="191.50"></text></g><g><title>sokobond-express`__rdl_alloc (3 samples, 0.06%)</title><rect x="47.4062%" y="181" width="0.0552%" height="15" fill="rgb(244,70,9)" fg:x="2577" fg:w="3"/><text x="47.6562%" y="191.50"></text></g><g><title>sokobond-express`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="47.4798%" y="165" width="0.0184%" height="15" fill="rgb(217,125,39)" fg:x="2581" fg:w="1"/><text x="47.7298%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="47.5717%" y="133" width="0.0184%" height="15" fill="rgb(235,36,10)" fg:x="2586" fg:w="1"/><text x="47.8217%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (5 samples, 0.09%)</title><rect x="47.6085%" y="117" width="0.0920%" height="15" fill="rgb(251,123,47)" fg:x="2588" fg:w="5"/><text x="47.8585%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.18%)</title><rect x="47.5350%" y="149" width="0.1840%" height="15" fill="rgb(221,13,13)" fg:x="2584" fg:w="10"/><text x="47.7850%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.13%)</title><rect x="47.5901%" y="133" width="0.1288%" height="15" fill="rgb(238,131,9)" fg:x="2587" fg:w="7"/><text x="47.8401%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="47.7005%" y="117" width="0.0184%" height="15" fill="rgb(211,50,8)" fg:x="2593" fg:w="1"/><text x="47.9505%" y="127.50"></text></g><g><title>sokobond-express`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (15 samples, 0.28%)</title><rect x="47.4614%" y="181" width="0.2759%" height="15" fill="rgb(245,182,24)" fg:x="2580" fg:w="15"/><text x="47.7114%" y="191.50"></text></g><g><title>sokobond-express`alloc::raw_vec::finish_grow (13 samples, 0.24%)</title><rect x="47.4982%" y="165" width="0.2391%" height="15" fill="rgb(242,14,37)" fg:x="2582" fg:w="13"/><text x="47.7482%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="47.7189%" y="149" width="0.0184%" height="15" fill="rgb(246,228,12)" fg:x="2594" fg:w="1"/><text x="47.9689%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (1 samples, 0.02%)</title><rect x="47.7373%" y="165" width="0.0184%" height="15" fill="rgb(213,55,15)" fg:x="2595" fg:w="1"/><text x="47.9873%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (24 samples, 0.44%)</title><rect x="47.7557%" y="165" width="0.4415%" height="15" fill="rgb(209,9,3)" fg:x="2596" fg:w="24"/><text x="48.0057%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.02%)</title><rect x="48.2340%" y="149" width="0.0184%" height="15" fill="rgb(230,59,30)" fg:x="2622" fg:w="1"/><text x="48.4840%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="48.2524%" y="149" width="0.0184%" height="15" fill="rgb(209,121,21)" fg:x="2623" fg:w="1"/><text x="48.5024%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.06%)</title><rect x="48.4180%" y="133" width="0.0552%" height="15" fill="rgb(220,109,13)" fg:x="2632" fg:w="3"/><text x="48.6680%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (17 samples, 0.31%)</title><rect x="48.1972%" y="165" width="0.3127%" height="15" fill="rgb(232,18,1)" fg:x="2620" fg:w="17"/><text x="48.4472%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.24%)</title><rect x="48.2708%" y="149" width="0.2391%" height="15" fill="rgb(215,41,42)" fg:x="2624" fg:w="13"/><text x="48.5208%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.04%)</title><rect x="48.4731%" y="133" width="0.0368%" height="15" fill="rgb(224,123,36)" fg:x="2635" fg:w="2"/><text x="48.7231%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (4 samples, 0.07%)</title><rect x="48.5099%" y="165" width="0.0736%" height="15" fill="rgb(240,125,3)" fg:x="2637" fg:w="4"/><text x="48.7599%" y="175.50"></text></g><g><title>sokobond-express`core::ptr::drop_in_place&lt;sokobond_express::Local&gt; (55 samples, 1.01%)</title><rect x="47.7373%" y="181" width="1.0118%" height="15" fill="rgb(205,98,50)" fg:x="2595" fg:w="55"/><text x="47.9873%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.17%)</title><rect x="48.5835%" y="165" width="0.1656%" height="15" fill="rgb(205,185,37)" fg:x="2641" fg:w="9"/><text x="48.8335%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="50.7174%" y="165" width="0.0184%" height="15" fill="rgb(238,207,15)" fg:x="2757" fg:w="1"/><text x="50.9674%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="50.7358%" y="165" width="0.0184%" height="15" fill="rgb(213,199,42)" fg:x="2758" fg:w="1"/><text x="50.9858%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="50.7910%" y="149" width="0.0184%" height="15" fill="rgb(235,201,11)" fg:x="2761" fg:w="1"/><text x="51.0410%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="50.8094%" y="149" width="0.0184%" height="15" fill="rgb(207,46,11)" fg:x="2762" fg:w="1"/><text x="51.0594%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.02%)</title><rect x="50.8278%" y="149" width="0.0184%" height="15" fill="rgb(241,35,35)" fg:x="2763" fg:w="1"/><text x="51.0778%" y="159.50"></text></g><g><title>sokobond-express`DYLD-STUB$$realloc (1 samples, 0.02%)</title><rect x="50.8462%" y="149" width="0.0184%" height="15" fill="rgb(243,32,47)" fg:x="2764" fg:w="1"/><text x="51.0962%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="50.9382%" y="101" width="0.0184%" height="15" fill="rgb(247,202,23)" fg:x="2769" fg:w="1"/><text x="51.1882%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="50.9566%" y="101" width="0.0184%" height="15" fill="rgb(219,102,11)" fg:x="2770" fg:w="1"/><text x="51.2066%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (2 samples, 0.04%)</title><rect x="50.9750%" y="101" width="0.0368%" height="15" fill="rgb(243,110,44)" fg:x="2771" fg:w="2"/><text x="51.2250%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="51.0118%" y="101" width="0.0184%" height="15" fill="rgb(222,74,54)" fg:x="2773" fg:w="1"/><text x="51.2618%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.06%)</title><rect x="51.0486%" y="85" width="0.0552%" height="15" fill="rgb(216,99,12)" fg:x="2775" fg:w="3"/><text x="51.2986%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.02%)</title><rect x="51.1589%" y="69" width="0.0184%" height="15" fill="rgb(226,22,26)" fg:x="2781" fg:w="1"/><text x="51.4089%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.04%)</title><rect x="51.3613%" y="53" width="0.0368%" height="15" fill="rgb(217,163,10)" fg:x="2792" fg:w="2"/><text x="51.6113%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (18 samples, 0.33%)</title><rect x="51.1038%" y="85" width="0.3311%" height="15" fill="rgb(213,25,53)" fg:x="2778" fg:w="18"/><text x="51.3538%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.26%)</title><rect x="51.1773%" y="69" width="0.2575%" height="15" fill="rgb(252,105,26)" fg:x="2782" fg:w="14"/><text x="51.4273%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.04%)</title><rect x="51.3981%" y="53" width="0.0368%" height="15" fill="rgb(220,39,43)" fg:x="2794" fg:w="2"/><text x="51.6481%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (4 samples, 0.07%)</title><rect x="51.4533%" y="69" width="0.0736%" height="15" fill="rgb(229,68,48)" fg:x="2797" fg:w="4"/><text x="51.7033%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.04%)</title><rect x="51.4901%" y="53" width="0.0368%" height="15" fill="rgb(252,8,32)" fg:x="2799" fg:w="2"/><text x="51.7401%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.06%)</title><rect x="51.5636%" y="53" width="0.0552%" height="15" fill="rgb(223,20,43)" fg:x="2803" fg:w="3"/><text x="51.8136%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.24%)</title><rect x="51.4349%" y="85" width="0.2391%" height="15" fill="rgb(229,81,49)" fg:x="2796" fg:w="13"/><text x="51.6849%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.15%)</title><rect x="51.5269%" y="69" width="0.1472%" height="15" fill="rgb(236,28,36)" fg:x="2801" fg:w="8"/><text x="51.7769%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.06%)</title><rect x="51.6188%" y="53" width="0.0552%" height="15" fill="rgb(249,185,26)" fg:x="2806" fg:w="3"/><text x="51.8688%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.04%)</title><rect x="51.6372%" y="37" width="0.0368%" height="15" fill="rgb(249,174,33)" fg:x="2807" fg:w="2"/><text x="51.8872%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.04%)</title><rect x="51.6740%" y="85" width="0.0368%" height="15" fill="rgb(233,201,37)" fg:x="2809" fg:w="2"/><text x="51.9240%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.04%)</title><rect x="51.6740%" y="69" width="0.0368%" height="15" fill="rgb(221,78,26)" fg:x="2809" fg:w="2"/><text x="51.9240%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (6 samples, 0.11%)</title><rect x="51.7108%" y="85" width="0.1104%" height="15" fill="rgb(250,127,30)" fg:x="2811" fg:w="6"/><text x="51.9608%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="51.8028%" y="69" width="0.0184%" height="15" fill="rgb(230,49,44)" fg:x="2816" fg:w="1"/><text x="52.0528%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (48 samples, 0.88%)</title><rect x="51.0302%" y="101" width="0.8830%" height="15" fill="rgb(229,67,23)" fg:x="2774" fg:w="48"/><text x="51.2802%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.09%)</title><rect x="51.8212%" y="85" width="0.0920%" height="15" fill="rgb(249,83,47)" fg:x="2817" fg:w="5"/><text x="52.0712%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="51.9132%" y="101" width="0.0184%" height="15" fill="rgb(215,43,3)" fg:x="2822" fg:w="1"/><text x="52.1632%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.02%)</title><rect x="51.9316%" y="101" width="0.0184%" height="15" fill="rgb(238,154,13)" fg:x="2823" fg:w="1"/><text x="52.1816%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (67 samples, 1.23%)</title><rect x="50.9198%" y="117" width="1.2325%" height="15" fill="rgb(219,56,2)" fg:x="2768" fg:w="67"/><text x="51.1698%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.20%)</title><rect x="51.9500%" y="101" width="0.2024%" height="15" fill="rgb(233,0,4)" fg:x="2824" fg:w="11"/><text x="52.2000%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (2 samples, 0.04%)</title><rect x="52.1523%" y="117" width="0.0368%" height="15" fill="rgb(235,30,7)" fg:x="2835" fg:w="2"/><text x="52.4023%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="52.1891%" y="117" width="0.0184%" height="15" fill="rgb(250,79,13)" fg:x="2837" fg:w="1"/><text x="52.4391%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.02%)</title><rect x="52.2075%" y="117" width="0.0184%" height="15" fill="rgb(211,146,34)" fg:x="2838" fg:w="1"/><text x="52.4575%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (77 samples, 1.42%)</title><rect x="50.8830%" y="133" width="1.4165%" height="15" fill="rgb(228,22,38)" fg:x="2766" fg:w="77"/><text x="51.1330%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.07%)</title><rect x="52.2259%" y="117" width="0.0736%" height="15" fill="rgb(235,168,5)" fg:x="2839" fg:w="4"/><text x="52.4759%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="52.2811%" y="101" width="0.0184%" height="15" fill="rgb(221,155,16)" fg:x="2842" fg:w="1"/><text x="52.5311%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="52.2995%" y="133" width="0.0184%" height="15" fill="rgb(215,215,53)" fg:x="2843" fg:w="1"/><text x="52.5495%" y="143.50"></text></g><g><title>sokobond-express`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (86 samples, 1.58%)</title><rect x="50.7542%" y="165" width="1.5820%" height="15" fill="rgb(223,4,10)" fg:x="2759" fg:w="86"/><text x="51.0042%" y="175.50"></text></g><g><title>sokobond-express`alloc::raw_vec::finish_grow (80 samples, 1.47%)</title><rect x="50.8646%" y="149" width="1.4717%" height="15" fill="rgb(234,103,6)" fg:x="2765" fg:w="80"/><text x="51.1146%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="52.3179%" y="133" width="0.0184%" height="15" fill="rgb(227,97,0)" fg:x="2844" fg:w="1"/><text x="52.5679%" y="143.50"></text></g><g><title>sokobond-express`sokobond_express::Local::maybe_move (196 samples, 3.61%)</title><rect x="48.7491%" y="181" width="3.6056%" height="15" fill="rgb(234,150,53)" fg:x="2650" fg:w="196"/><text x="48.9991%" y="191.50">soko..</text></g><g><title>sokobond-express`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="52.3363%" y="165" width="0.0184%" height="15" fill="rgb(228,201,54)" fg:x="2845" fg:w="1"/><text x="52.5863%" y="175.50"></text></g><g><title>sokobond-express`&lt;sokobond_express::Local as solver::State&lt;sokobond_express::Global,sokobond_express::Step&gt;&gt;::next_states (513 samples, 9.44%)</title><rect x="43.2119%" y="197" width="9.4371%" height="15" fill="rgb(222,22,37)" fg:x="2349" fg:w="513"/><text x="43.4619%" y="207.50">sokobond-expr..</text></g><g><title>sokobond-express`solver::point::Point::manhattan_distance (16 samples, 0.29%)</title><rect x="52.3547%" y="181" width="0.2943%" height="15" fill="rgb(237,53,32)" fg:x="2846" fg:w="16"/><text x="52.6047%" y="191.50"></text></g><g><title>sokobond-express`DYLD-STUB$$free (5 samples, 0.09%)</title><rect x="52.6490%" y="197" width="0.0920%" height="15" fill="rgb(233,25,53)" fg:x="2862" fg:w="5"/><text x="52.8990%" y="207.50"></text></g><g><title>sokobond-express`DYLD-STUB$$malloc (4 samples, 0.07%)</title><rect x="52.7410%" y="197" width="0.0736%" height="15" fill="rgb(210,40,34)" fg:x="2867" fg:w="4"/><text x="52.9910%" y="207.50"></text></g><g><title>sokobond-express`DYLD-STUB$$memcpy (4 samples, 0.07%)</title><rect x="52.8146%" y="197" width="0.0736%" height="15" fill="rgb(241,220,44)" fg:x="2871" fg:w="4"/><text x="53.0646%" y="207.50"></text></g><g><title>sokobond-express`__rdl_alloc (7 samples, 0.13%)</title><rect x="52.8882%" y="197" width="0.1288%" height="15" fill="rgb(235,28,35)" fg:x="2875" fg:w="7"/><text x="53.1382%" y="207.50"></text></g><g><title>sokobond-express`__rust_dealloc (1 samples, 0.02%)</title><rect x="53.0169%" y="197" width="0.0184%" height="15" fill="rgb(210,56,17)" fg:x="2882" fg:w="1"/><text x="53.2669%" y="207.50"></text></g><g><title>sokobond-express`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.02%)</title><rect x="53.0353%" y="197" width="0.0184%" height="15" fill="rgb(224,130,29)" fg:x="2883" fg:w="1"/><text x="53.2853%" y="207.50"></text></g><g><title>sokobond-express`core::hash::BuildHasher::hash_one (3 samples, 0.06%)</title><rect x="53.0537%" y="197" width="0.0552%" height="15" fill="rgb(235,212,8)" fg:x="2884" fg:w="3"/><text x="53.3037%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (4 samples, 0.07%)</title><rect x="53.1457%" y="181" width="0.0736%" height="15" fill="rgb(223,33,50)" fg:x="2889" fg:w="4"/><text x="53.3957%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (34 samples, 0.63%)</title><rect x="53.2193%" y="181" width="0.6255%" height="15" fill="rgb(219,149,13)" fg:x="2893" fg:w="34"/><text x="53.4693%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.07%)</title><rect x="53.8447%" y="181" width="0.0736%" height="15" fill="rgb(250,156,29)" fg:x="2927" fg:w="4"/><text x="54.0947%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.04%)</title><rect x="54.0103%" y="165" width="0.0368%" height="15" fill="rgb(216,193,19)" fg:x="2936" fg:w="2"/><text x="54.2603%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.15%)</title><rect x="53.9183%" y="181" width="0.1472%" height="15" fill="rgb(216,135,14)" fg:x="2931" fg:w="8"/><text x="54.1683%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (1 samples, 0.02%)</title><rect x="54.0471%" y="165" width="0.0184%" height="15" fill="rgb(241,47,5)" fg:x="2938" fg:w="1"/><text x="54.2971%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="54.0471%" y="149" width="0.0184%" height="15" fill="rgb(233,42,35)" fg:x="2938" fg:w="1"/><text x="54.2971%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.06%)</title><rect x="54.3230%" y="149" width="0.0552%" height="15" fill="rgb(231,13,6)" fg:x="2953" fg:w="3"/><text x="54.5730%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.06%)</title><rect x="54.3782%" y="149" width="0.0552%" height="15" fill="rgb(207,181,40)" fg:x="2956" fg:w="3"/><text x="54.6282%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (21 samples, 0.39%)</title><rect x="54.0655%" y="181" width="0.3863%" height="15" fill="rgb(254,173,49)" fg:x="2939" fg:w="21"/><text x="54.3155%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (20 samples, 0.37%)</title><rect x="54.0839%" y="165" width="0.3679%" height="15" fill="rgb(221,1,38)" fg:x="2940" fg:w="20"/><text x="54.3339%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (1 samples, 0.02%)</title><rect x="54.4334%" y="149" width="0.0184%" height="15" fill="rgb(206,124,46)" fg:x="2959" fg:w="1"/><text x="54.6834%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="54.4334%" y="133" width="0.0184%" height="15" fill="rgb(249,21,11)" fg:x="2959" fg:w="1"/><text x="54.6834%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="54.4518%" y="181" width="0.0184%" height="15" fill="rgb(222,201,40)" fg:x="2960" fg:w="1"/><text x="54.7018%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.04%)</title><rect x="54.4702%" y="181" width="0.0368%" height="15" fill="rgb(235,61,29)" fg:x="2961" fg:w="2"/><text x="54.7202%" y="191.50"></text></g><g><title>sokobond-express`core::ptr::drop_in_place&lt;sokobond_express::Local&gt; (92 samples, 1.69%)</title><rect x="53.1089%" y="197" width="1.6924%" height="15" fill="rgb(219,207,3)" fg:x="2887" fg:w="92"/><text x="53.3589%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (16 samples, 0.29%)</title><rect x="54.5070%" y="181" width="0.2943%" height="15" fill="rgb(222,56,46)" fg:x="2963" fg:w="16"/><text x="54.7570%" y="191.50"></text></g><g><title>sokobond-express`core::hash::BuildHasher::hash_one (32 samples, 0.59%)</title><rect x="55.7579%" y="181" width="0.5887%" height="15" fill="rgb(239,76,54)" fg:x="3031" fg:w="32"/><text x="56.0079%" y="191.50"></text></g><g><title>sokobond-express`core::hash::Hash::hash_slice (71 samples, 1.31%)</title><rect x="56.3466%" y="181" width="1.3061%" height="15" fill="rgb(231,124,27)" fg:x="3063" fg:w="71"/><text x="56.5966%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.04%)</title><rect x="59.1979%" y="165" width="0.0368%" height="15" fill="rgb(249,195,6)" fg:x="3218" fg:w="2"/><text x="59.4479%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.04%)</title><rect x="59.1979%" y="149" width="0.0368%" height="15" fill="rgb(237,174,47)" fg:x="3218" fg:w="2"/><text x="59.4479%" y="159.50"></text></g><g><title>sokobond-express`core::hash::BuildHasher::hash_one (313 samples, 5.76%)</title><rect x="59.2347%" y="165" width="5.7579%" height="15" fill="rgb(206,201,31)" fg:x="3220" fg:w="313"/><text x="59.4847%" y="175.50">sokobon..</text></g><g><title>sokobond-express`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (743 samples, 13.67%)</title><rect x="54.8013%" y="197" width="13.6681%" height="15" fill="rgb(231,57,52)" fg:x="2979" fg:w="743"/><text x="55.0513%" y="207.50">sokobond-express`hash..</text></g><g><title>sokobond-express`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (588 samples, 10.82%)</title><rect x="57.6527%" y="181" width="10.8168%" height="15" fill="rgb(248,177,22)" fg:x="3134" fg:w="588"/><text x="57.9027%" y="191.50">sokobond-express..</text></g><g><title>sokobond-express`core::hash::Hash::hash_slice (189 samples, 3.48%)</title><rect x="64.9926%" y="165" width="3.4768%" height="15" fill="rgb(215,211,37)" fg:x="3533" fg:w="189"/><text x="65.2426%" y="175.50">sok..</text></g><g><title>sokobond-express`core::hash::Hasher::write_usize (209 samples, 3.84%)</title><rect x="68.4695%" y="181" width="3.8447%" height="15" fill="rgb(241,128,51)" fg:x="3722" fg:w="209"/><text x="68.7195%" y="191.50">soko..</text></g><g><title>sokobond-express`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (18 samples, 0.33%)</title><rect x="72.4246%" y="165" width="0.3311%" height="15" fill="rgb(227,165,31)" fg:x="3937" fg:w="18"/><text x="72.6746%" y="175.50"></text></g><g><title>sokobond-express`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (94 samples, 1.73%)</title><rect x="72.3142%" y="181" width="1.7292%" height="15" fill="rgb(228,167,24)" fg:x="3931" fg:w="94"/><text x="72.5642%" y="191.50"></text></g><g><title>sokobond-express`core::hash::Hash::hash_slice (70 samples, 1.29%)</title><rect x="72.7557%" y="165" width="1.2877%" height="15" fill="rgb(228,143,12)" fg:x="3955" fg:w="70"/><text x="73.0057%" y="175.50"></text></g><g><title>sokobond-express`indexmap::map::IndexMap&lt;K,V,S&gt;::get (316 samples, 5.81%)</title><rect x="68.4695%" y="197" width="5.8131%" height="15" fill="rgb(249,149,8)" fg:x="3722" fg:w="316"/><text x="68.7195%" y="207.50">sokobon..</text></g><g><title>sokobond-express`indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (13 samples, 0.24%)</title><rect x="74.0434%" y="181" width="0.2391%" height="15" fill="rgb(243,35,44)" fg:x="4025" fg:w="13"/><text x="74.2934%" y="191.50"></text></g><g><title>sokobond-express`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (3 samples, 0.06%)</title><rect x="74.2826%" y="197" width="0.0552%" height="15" fill="rgb(246,89,9)" fg:x="4038" fg:w="3"/><text x="74.5326%" y="207.50"></text></g><g><title>sokobond-express`indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_unique (2 samples, 0.04%)</title><rect x="74.3377%" y="197" width="0.0368%" height="15" fill="rgb(233,213,13)" fg:x="4041" fg:w="2"/><text x="74.5877%" y="207.50"></text></g><g><title>sokobond-express`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (1 samples, 0.02%)</title><rect x="74.3745%" y="197" width="0.0184%" height="15" fill="rgb(233,141,41)" fg:x="4043" fg:w="1"/><text x="74.6245%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.06%)</title><rect x="74.3929%" y="181" width="0.0552%" height="15" fill="rgb(239,167,4)" fg:x="4044" fg:w="3"/><text x="74.6429%" y="191.50"></text></g><g><title>sokobond-express`indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (4 samples, 0.07%)</title><rect x="74.4481%" y="181" width="0.0736%" height="15" fill="rgb(209,217,16)" fg:x="4047" fg:w="4"/><text x="74.6981%" y="191.50"></text></g><g><title>sokobond-express`keyed_priority_queue::keyed_priority_queue::KeyedPriorityQueue&lt;TKey,TPriority,S&gt;::pop (28 samples, 0.52%)</title><rect x="74.3929%" y="197" width="0.5151%" height="15" fill="rgb(219,88,35)" fg:x="4044" fg:w="28"/><text x="74.6429%" y="207.50"></text></g><g><title>sokobond-express`keyed_priority_queue::editable_binary_heap::BinaryHeap&lt;TPriority&gt;::remove (21 samples, 0.39%)</title><rect x="74.5217%" y="181" width="0.3863%" height="15" fill="rgb(220,193,23)" fg:x="4051" fg:w="21"/><text x="74.7717%" y="191.50"></text></g><g><title>sokobond-express`core::hash::Hasher::write_usize (138 samples, 2.54%)</title><rect x="74.9816%" y="181" width="2.5386%" height="15" fill="rgb(230,90,52)" fg:x="4076" fg:w="138"/><text x="75.2316%" y="191.50">so..</text></g><g><title>sokobond-express`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (15 samples, 0.28%)</title><rect x="77.7042%" y="165" width="0.2759%" height="15" fill="rgb(252,106,19)" fg:x="4224" fg:w="15"/><text x="77.9542%" y="175.50"></text></g><g><title>sokobond-express`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (101 samples, 1.86%)</title><rect x="77.5202%" y="181" width="1.8580%" height="15" fill="rgb(206,74,20)" fg:x="4214" fg:w="101"/><text x="77.7702%" y="191.50">s..</text></g><g><title>sokobond-express`core::hash::Hash::hash_slice (76 samples, 1.40%)</title><rect x="77.9801%" y="165" width="1.3981%" height="15" fill="rgb(230,138,44)" fg:x="4239" fg:w="76"/><text x="78.2301%" y="175.50"></text></g><g><title>sokobond-express`indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_unique (2 samples, 0.04%)</title><rect x="79.3782%" y="181" width="0.0368%" height="15" fill="rgb(235,182,43)" fg:x="4315" fg:w="2"/><text x="79.6282%" y="191.50"></text></g><g><title>sokobond-express`hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (2 samples, 0.04%)</title><rect x="79.3782%" y="165" width="0.0368%" height="15" fill="rgb(242,16,51)" fg:x="4315" fg:w="2"/><text x="79.6282%" y="175.50"></text></g><g><title>sokobond-express`hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.02%)</title><rect x="79.3966%" y="149" width="0.0184%" height="15" fill="rgb(248,9,4)" fg:x="4316" fg:w="1"/><text x="79.6466%" y="159.50"></text></g><g><title>sokobond-express`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (11 samples, 0.20%)</title><rect x="79.4150%" y="181" width="0.2024%" height="15" fill="rgb(210,31,22)" fg:x="4317" fg:w="11"/><text x="79.6650%" y="191.50"></text></g><g><title>sokobond-express`keyed_priority_queue::keyed_priority_queue::KeyedPriorityQueue&lt;TKey,TPriority,S&gt;::push (264 samples, 4.86%)</title><rect x="74.9080%" y="197" width="4.8565%" height="15" fill="rgb(239,54,39)" fg:x="4072" fg:w="264"/><text x="75.1580%" y="207.50">sokobo..</text></g><g><title>sokobond-express`keyed_priority_queue::editable_binary_heap::BinaryHeap&lt;TPriority&gt;::heapify_up (8 samples, 0.15%)</title><rect x="79.6174%" y="181" width="0.1472%" height="15" fill="rgb(230,99,41)" fg:x="4328" fg:w="8"/><text x="79.8674%" y="191.50"></text></g><g><title>sokobond-express`sokobond_express::Local::maybe_move (3 samples, 0.06%)</title><rect x="79.7645%" y="197" width="0.0552%" height="15" fill="rgb(253,106,12)" fg:x="4336" fg:w="3"/><text x="80.0145%" y="207.50"></text></g><g><title>sokobond-express`solver::point::Point::manhattan_distance (9 samples, 0.17%)</title><rect x="79.8197%" y="197" width="0.1656%" height="15" fill="rgb(213,46,41)" fg:x="4339" fg:w="9"/><text x="80.0697%" y="207.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_absolute_time (1 samples, 0.02%)</title><rect x="79.9853%" y="165" width="0.0184%" height="15" fill="rgb(215,133,35)" fg:x="4348" fg:w="1"/><text x="80.2353%" y="175.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_timebase_info (2 samples, 0.04%)</title><rect x="80.0037%" y="165" width="0.0368%" height="15" fill="rgb(213,28,5)" fg:x="4349" fg:w="2"/><text x="80.2537%" y="175.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (1 samples, 0.02%)</title><rect x="80.0405%" y="165" width="0.0184%" height="15" fill="rgb(215,77,49)" fg:x="4351" fg:w="1"/><text x="80.2905%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (7 samples, 0.13%)</title><rect x="80.0589%" y="165" width="0.1288%" height="15" fill="rgb(248,100,22)" fg:x="4352" fg:w="7"/><text x="80.3089%" y="175.50"></text></g><g><title>sokobond-express`std::sys::pal::unix::time::Timespec::now (12 samples, 0.22%)</title><rect x="79.9853%" y="197" width="0.2208%" height="15" fill="rgb(208,67,9)" fg:x="4348" fg:w="12"/><text x="80.2353%" y="207.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (12 samples, 0.22%)</title><rect x="79.9853%" y="181" width="0.2208%" height="15" fill="rgb(219,133,21)" fg:x="4348" fg:w="12"/><text x="80.2353%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (1 samples, 0.02%)</title><rect x="80.1876%" y="165" width="0.0184%" height="15" fill="rgb(246,46,29)" fg:x="4359" fg:w="1"/><text x="80.4376%" y="175.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_absolute_time (1 samples, 0.02%)</title><rect x="80.2060%" y="149" width="0.0184%" height="15" fill="rgb(246,185,52)" fg:x="4360" fg:w="1"/><text x="80.4560%" y="159.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_timebase_info (1 samples, 0.02%)</title><rect x="80.2244%" y="149" width="0.0184%" height="15" fill="rgb(252,136,11)" fg:x="4361" fg:w="1"/><text x="80.4744%" y="159.50"></text></g><g><title>sokobond-express`&lt;solver::Solver&lt;GlobalState,LocalState,Step&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,249 samples, 78.16%)</title><rect x="2.4099%" y="213" width="78.1641%" height="15" fill="rgb(219,138,53)" fg:x="131" fg:w="4249"/><text x="2.6599%" y="223.50">sokobond-express`&lt;solver::Solver&lt;GlobalState,LocalState,Step&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>sokobond-express`std::time::Instant::elapsed (20 samples, 0.37%)</title><rect x="80.2060%" y="197" width="0.3679%" height="15" fill="rgb(211,51,23)" fg:x="4360" fg:w="20"/><text x="80.4560%" y="207.50"></text></g><g><title>sokobond-express`std::sys::pal::unix::time::Timespec::now (20 samples, 0.37%)</title><rect x="80.2060%" y="181" width="0.3679%" height="15" fill="rgb(247,221,28)" fg:x="4360" fg:w="20"/><text x="80.4560%" y="191.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (20 samples, 0.37%)</title><rect x="80.2060%" y="165" width="0.3679%" height="15" fill="rgb(251,222,45)" fg:x="4360" fg:w="20"/><text x="80.4560%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (18 samples, 0.33%)</title><rect x="80.2428%" y="149" width="0.3311%" height="15" fill="rgb(217,162,53)" fg:x="4362" fg:w="18"/><text x="80.4928%" y="159.50"></text></g><g><title>sokobond-express`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="80.5740%" y="213" width="0.0184%" height="15" fill="rgb(229,93,14)" fg:x="4380" fg:w="1"/><text x="80.8240%" y="223.50"></text></g><g><title>sokobond-express`DYLD-STUB$$malloc (2 samples, 0.04%)</title><rect x="80.5923%" y="213" width="0.0368%" height="15" fill="rgb(209,67,49)" fg:x="4381" fg:w="2"/><text x="80.8423%" y="223.50"></text></g><g><title>sokobond-express`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="80.6291%" y="213" width="0.0184%" height="15" fill="rgb(213,87,29)" fg:x="4383" fg:w="1"/><text x="80.8791%" y="223.50"></text></g><g><title>sokobond-express`__rdl_alloc (2 samples, 0.04%)</title><rect x="80.6475%" y="213" width="0.0368%" height="15" fill="rgb(205,151,52)" fg:x="4384" fg:w="2"/><text x="80.8975%" y="223.50"></text></g><g><title>sokobond-express`core::hash::Hash::hash_slice (55 samples, 1.01%)</title><rect x="80.6843%" y="213" width="1.0118%" height="15" fill="rgb(253,215,39)" fg:x="4386" fg:w="55"/><text x="80.9343%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="81.7145%" y="197" width="0.0184%" height="15" fill="rgb(221,220,41)" fg:x="4442" fg:w="1"/><text x="81.9645%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (20 samples, 0.37%)</title><rect x="81.7329%" y="197" width="0.3679%" height="15" fill="rgb(218,133,21)" fg:x="4443" fg:w="20"/><text x="81.9829%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.02%)</title><rect x="82.1192%" y="181" width="0.0184%" height="15" fill="rgb(221,193,43)" fg:x="4464" fg:w="1"/><text x="82.3692%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.18%)</title><rect x="82.1008%" y="197" width="0.1840%" height="15" fill="rgb(240,128,52)" fg:x="4463" fg:w="10"/><text x="82.3508%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.15%)</title><rect x="82.1376%" y="181" width="0.1472%" height="15" fill="rgb(253,114,12)" fg:x="4465" fg:w="8"/><text x="82.3876%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="82.2664%" y="165" width="0.0184%" height="15" fill="rgb(215,223,47)" fg:x="4472" fg:w="1"/><text x="82.5164%" y="175.50"></text></g><g><title>sokobond-express`core::ptr::drop_in_place&lt;sokobond_express::Local&gt; (35 samples, 0.64%)</title><rect x="81.6961%" y="213" width="0.6439%" height="15" fill="rgb(248,225,23)" fg:x="4441" fg:w="35"/><text x="81.9461%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.06%)</title><rect x="82.2848%" y="197" width="0.0552%" height="15" fill="rgb(250,108,0)" fg:x="4473" fg:w="3"/><text x="82.5348%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (23 samples, 0.42%)</title><rect x="82.3584%" y="197" width="0.4231%" height="15" fill="rgb(228,208,7)" fg:x="4477" fg:w="23"/><text x="82.6084%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (16 samples, 0.29%)</title><rect x="82.7815%" y="197" width="0.2943%" height="15" fill="rgb(244,45,10)" fg:x="4500" fg:w="16"/><text x="83.0315%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.06%)</title><rect x="83.0758%" y="197" width="0.0552%" height="15" fill="rgb(207,125,25)" fg:x="4516" fg:w="3"/><text x="83.3258%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.04%)</title><rect x="83.0942%" y="181" width="0.0368%" height="15" fill="rgb(210,195,18)" fg:x="4517" fg:w="2"/><text x="83.3442%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (37 samples, 0.68%)</title><rect x="83.1494%" y="181" width="0.6806%" height="15" fill="rgb(249,80,12)" fg:x="4520" fg:w="37"/><text x="83.3994%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (15 samples, 0.28%)</title><rect x="83.8300%" y="181" width="0.2759%" height="15" fill="rgb(221,65,9)" fg:x="4557" fg:w="15"/><text x="84.0800%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.07%)</title><rect x="84.1060%" y="181" width="0.0736%" height="15" fill="rgb(235,49,36)" fg:x="4572" fg:w="4"/><text x="84.3560%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="84.1795%" y="181" width="0.0184%" height="15" fill="rgb(225,32,20)" fg:x="4576" fg:w="1"/><text x="84.4295%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="84.1979%" y="181" width="0.0184%" height="15" fill="rgb(215,141,46)" fg:x="4577" fg:w="1"/><text x="84.4479%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_try_free_default (1 samples, 0.02%)</title><rect x="84.2163%" y="181" width="0.0184%" height="15" fill="rgb(250,160,47)" fg:x="4578" fg:w="1"/><text x="84.4663%" y="191.50"></text></g><g><title>sokobond-express`DYLD-STUB$$free (7 samples, 0.13%)</title><rect x="84.2347%" y="181" width="0.1288%" height="15" fill="rgb(216,222,40)" fg:x="4579" fg:w="7"/><text x="84.4847%" y="191.50"></text></g><g><title>sokobond-express`__rust_dealloc (4 samples, 0.07%)</title><rect x="84.3635%" y="181" width="0.0736%" height="15" fill="rgb(234,217,39)" fg:x="4586" fg:w="4"/><text x="84.6135%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (6 samples, 0.11%)</title><rect x="84.6762%" y="165" width="0.1104%" height="15" fill="rgb(207,178,40)" fg:x="4603" fg:w="6"/><text x="84.9262%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (113 samples, 2.08%)</title><rect x="84.7866%" y="165" width="2.0787%" height="15" fill="rgb(221,136,13)" fg:x="4609" fg:w="113"/><text x="85.0366%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.07%)</title><rect x="86.8653%" y="165" width="0.0736%" height="15" fill="rgb(249,199,10)" fg:x="4722" fg:w="4"/><text x="87.1153%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (4 samples, 0.07%)</title><rect x="87.2149%" y="149" width="0.0736%" height="15" fill="rgb(249,222,13)" fg:x="4741" fg:w="4"/><text x="87.4649%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="87.2884%" y="149" width="0.0184%" height="15" fill="rgb(244,185,38)" fg:x="4745" fg:w="1"/><text x="87.5384%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (27 samples, 0.50%)</title><rect x="88.1714%" y="133" width="0.4967%" height="15" fill="rgb(236,202,9)" fg:x="4793" fg:w="27"/><text x="88.4214%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (8 samples, 0.15%)</title><rect x="88.5210%" y="117" width="0.1472%" height="15" fill="rgb(250,229,37)" fg:x="4812" fg:w="8"/><text x="88.7710%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (9 samples, 0.17%)</title><rect x="88.6681%" y="133" width="0.1656%" height="15" fill="rgb(206,174,23)" fg:x="4820" fg:w="9"/><text x="88.9181%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (14 samples, 0.26%)</title><rect x="88.8337%" y="133" width="0.2575%" height="15" fill="rgb(211,33,43)" fg:x="4829" fg:w="14"/><text x="89.0837%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (11 samples, 0.20%)</title><rect x="89.0912%" y="133" width="0.2024%" height="15" fill="rgb(245,58,50)" fg:x="4843" fg:w="11"/><text x="89.3412%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.04%)</title><rect x="89.2568%" y="117" width="0.0368%" height="15" fill="rgb(244,68,36)" fg:x="4852" fg:w="2"/><text x="89.5068%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (131 samples, 2.41%)</title><rect x="87.3068%" y="149" width="2.4099%" height="15" fill="rgb(232,229,15)" fg:x="4746" fg:w="131"/><text x="87.5568%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (23 samples, 0.42%)</title><rect x="89.2936%" y="133" width="0.4231%" height="15" fill="rgb(254,30,23)" fg:x="4854" fg:w="23"/><text x="89.5436%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="89.6983%" y="117" width="0.0184%" height="15" fill="rgb(235,160,14)" fg:x="4876" fg:w="1"/><text x="89.9483%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (152 samples, 2.80%)</title><rect x="86.9389%" y="165" width="2.7962%" height="15" fill="rgb(212,155,44)" fg:x="4726" fg:w="152"/><text x="87.1889%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (1 samples, 0.02%)</title><rect x="89.7167%" y="149" width="0.0184%" height="15" fill="rgb(226,2,50)" fg:x="4877" fg:w="1"/><text x="89.9667%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.09%)</title><rect x="89.7351%" y="165" width="0.0920%" height="15" fill="rgb(234,177,6)" fg:x="4878" fg:w="5"/><text x="89.9851%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (32 samples, 0.59%)</title><rect x="89.8271%" y="165" width="0.5887%" height="15" fill="rgb(217,24,9)" fg:x="4883" fg:w="32"/><text x="90.0771%" y="175.50"></text></g><g><title>sokobond-express`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (505 samples, 9.29%)</title><rect x="83.1310%" y="197" width="9.2899%" height="15" fill="rgb(220,13,46)" fg:x="4519" fg:w="505"/><text x="83.3810%" y="207.50">sokobond-expr..</text></g><g><title>sokobond-express`core::ptr::drop_in_place&lt;sokobond_express::Local&gt; (434 samples, 7.98%)</title><rect x="84.4371%" y="181" width="7.9838%" height="15" fill="rgb(239,221,27)" fg:x="4590" fg:w="434"/><text x="84.6871%" y="191.50">sokobond-ex..</text></g><g><title>libsystem_platform.dylib`_platform_memset (109 samples, 2.01%)</title><rect x="90.4157%" y="165" width="2.0052%" height="15" fill="rgb(222,198,25)" fg:x="4915" fg:w="109"/><text x="90.6657%" y="175.50">l..</text></g><g><title>sokobond-express`DYLD-STUB$$free (2 samples, 0.04%)</title><rect x="92.4209%" y="197" width="0.0368%" height="15" fill="rgb(211,99,13)" fg:x="5024" fg:w="2"/><text x="92.6709%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="92.4577%" y="181" width="0.0184%" height="15" fill="rgb(232,111,31)" fg:x="5026" fg:w="1"/><text x="92.7077%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.15%)</title><rect x="92.4761%" y="165" width="0.1472%" height="15" fill="rgb(245,82,37)" fg:x="5027" fg:w="8"/><text x="92.7261%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.04%)</title><rect x="92.6233%" y="165" width="0.0368%" height="15" fill="rgb(227,149,46)" fg:x="5035" fg:w="2"/><text x="92.8733%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.04%)</title><rect x="92.6233%" y="149" width="0.0368%" height="15" fill="rgb(218,36,50)" fg:x="5035" fg:w="2"/><text x="92.8733%" y="159.50"></text></g><g><title>sokobond-express`core::ptr::drop_in_place&lt;keyed_priority_queue::keyed_priority_queue::KeyedPriorityQueue&lt;sokobond_express::Local,i64&gt;&gt; (20 samples, 0.37%)</title><rect x="92.4577%" y="197" width="0.3679%" height="15" fill="rgb(226,80,48)" fg:x="5026" fg:w="20"/><text x="92.7077%" y="207.50"></text></g><g><title>sokobond-express`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.35%)</title><rect x="92.4761%" y="181" width="0.3495%" height="15" fill="rgb(238,224,15)" fg:x="5027" fg:w="19"/><text x="92.7261%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.17%)</title><rect x="92.6600%" y="165" width="0.1656%" height="15" fill="rgb(241,136,10)" fg:x="5037" fg:w="9"/><text x="92.9100%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (4 samples, 0.07%)</title><rect x="92.9176%" y="181" width="0.0736%" height="15" fill="rgb(208,32,45)" fg:x="5051" fg:w="4"/><text x="93.1676%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (73 samples, 1.34%)</title><rect x="92.9912%" y="181" width="1.3429%" height="15" fill="rgb(207,135,9)" fg:x="5055" fg:w="73"/><text x="93.2412%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (5 samples, 0.09%)</title><rect x="94.3341%" y="181" width="0.0920%" height="15" fill="rgb(206,86,44)" fg:x="5128" fg:w="5"/><text x="94.5841%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (7 samples, 0.13%)</title><rect x="95.0331%" y="149" width="0.1288%" height="15" fill="rgb(245,177,15)" fg:x="5166" fg:w="7"/><text x="95.2831%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (7 samples, 0.13%)</title><rect x="95.0331%" y="133" width="0.1288%" height="15" fill="rgb(206,64,50)" fg:x="5166" fg:w="7"/><text x="95.2831%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free_plat (1 samples, 0.02%)</title><rect x="95.1619%" y="149" width="0.0184%" height="15" fill="rgb(234,36,40)" fg:x="5173" fg:w="1"/><text x="95.4119%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.04%)</title><rect x="95.1803%" y="149" width="0.0368%" height="15" fill="rgb(213,64,8)" fg:x="5174" fg:w="2"/><text x="95.4303%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (14 samples, 0.26%)</title><rect x="95.2171%" y="149" width="0.2575%" height="15" fill="rgb(210,75,36)" fg:x="5176" fg:w="14"/><text x="95.4671%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (130 samples, 2.39%)</title><rect x="94.4260%" y="181" width="2.3915%" height="15" fill="rgb(229,88,21)" fg:x="5133" fg:w="130"/><text x="94.6760%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (124 samples, 2.28%)</title><rect x="94.5364%" y="165" width="2.2811%" height="15" fill="rgb(252,204,47)" fg:x="5139" fg:w="124"/><text x="94.7864%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (73 samples, 1.34%)</title><rect x="95.4746%" y="149" width="1.3429%" height="15" fill="rgb(208,77,27)" fg:x="5190" fg:w="73"/><text x="95.7246%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (70 samples, 1.29%)</title><rect x="95.5298%" y="133" width="1.2877%" height="15" fill="rgb(221,76,26)" fg:x="5193" fg:w="70"/><text x="95.7798%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (47 samples, 0.86%)</title><rect x="96.8175%" y="181" width="0.8646%" height="15" fill="rgb(225,139,18)" fg:x="5263" fg:w="47"/><text x="97.0675%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (47 samples, 0.86%)</title><rect x="96.8175%" y="165" width="0.8646%" height="15" fill="rgb(230,137,11)" fg:x="5263" fg:w="47"/><text x="97.0675%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (47 samples, 0.86%)</title><rect x="96.8175%" y="149" width="0.8646%" height="15" fill="rgb(212,28,1)" fg:x="5263" fg:w="47"/><text x="97.0675%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (23 samples, 0.42%)</title><rect x="97.6821%" y="181" width="0.4231%" height="15" fill="rgb(248,164,17)" fg:x="5310" fg:w="23"/><text x="97.9321%" y="191.50"></text></g><g><title>sokobond-express`core::ptr::drop_in_place&lt;solver::Solver&lt;sokobond_express::Global,sokobond_express::Local,sokobond_express::Step&gt;&gt; (940 samples, 17.29%)</title><rect x="82.3400%" y="213" width="17.2921%" height="15" fill="rgb(222,171,42)" fg:x="4476" fg:w="940"/><text x="82.5900%" y="223.50">sokobond-express`core::ptr:..</text></g><g><title>sokobond-express`core::ptr::drop_in_place&lt;sokobond_express::Local&gt; (370 samples, 6.81%)</title><rect x="92.8256%" y="197" width="6.8065%" height="15" fill="rgb(243,84,45)" fg:x="5046" fg:w="370"/><text x="93.0756%" y="207.50">sokobond-..</text></g><g><title>libsystem_platform.dylib`_platform_memset (83 samples, 1.53%)</title><rect x="98.1052%" y="181" width="1.5269%" height="15" fill="rgb(252,49,23)" fg:x="5333" fg:w="83"/><text x="98.3552%" y="191.50"></text></g><g><title>sokobond-express`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.07%)</title><rect x="99.6321%" y="213" width="0.0736%" height="15" fill="rgb(215,19,7)" fg:x="5416" fg:w="4"/><text x="99.8821%" y="223.50"></text></g><g><title>sokobond-express`indexmap::map::IndexMap&lt;K,V,S&gt;::get (1 samples, 0.02%)</title><rect x="99.7057%" y="213" width="0.0184%" height="15" fill="rgb(238,81,41)" fg:x="5420" fg:w="1"/><text x="99.9557%" y="223.50"></text></g><g><title>dyld`start (5,423 samples, 99.76%)</title><rect x="0.0000%" y="309" width="99.7609%" height="15" fill="rgb(210,199,37)" fg:x="0" fg:w="5423"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>sokobond-express`main (5,422 samples, 99.74%)</title><rect x="0.0184%" y="293" width="99.7425%" height="15" fill="rgb(244,192,49)" fg:x="1" fg:w="5422"/><text x="0.2684%" y="303.50">sokobond-express`main</text></g><g><title>sokobond-express`std::rt::lang_start_internal (5,422 samples, 99.74%)</title><rect x="0.0184%" y="277" width="99.7425%" height="15" fill="rgb(226,211,11)" fg:x="1" fg:w="5422"/><text x="0.2684%" y="287.50">sokobond-express`std::rt::lang_start_internal</text></g><g><title>sokobond-express`std::rt::lang_start::_{{closure}} (5,422 samples, 99.74%)</title><rect x="0.0184%" y="261" width="99.7425%" height="15" fill="rgb(236,162,54)" fg:x="1" fg:w="5422"/><text x="0.2684%" y="271.50">sokobond-express`std::rt::lang_start::_{{closure}}</text></g><g><title>sokobond-express`std::sys::backtrace::__rust_begin_short_backtrace (5,422 samples, 99.74%)</title><rect x="0.0184%" y="245" width="99.7425%" height="15" fill="rgb(220,229,9)" fg:x="1" fg:w="5422"/><text x="0.2684%" y="255.50">sokobond-express`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>sokobond-express`sokobond_express::main (5,421 samples, 99.72%)</title><rect x="0.0368%" y="229" width="99.7241%" height="15" fill="rgb(250,87,22)" fg:x="2" fg:w="5421"/><text x="0.2868%" y="239.50">sokobond-express`sokobond_express::main</text></g><g><title>sokobond-express`keyed_priority_queue::keyed_priority_queue::KeyedPriorityQueue&lt;TKey,TPriority,S&gt;::push (2 samples, 0.04%)</title><rect x="99.7241%" y="213" width="0.0368%" height="15" fill="rgb(239,43,17)" fg:x="5421" fg:w="2"/><text x="99.9741%" y="223.50"></text></g><g><title>all (5,436 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(231,177,25)" fg:x="0" fg:w="5436"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__exit (13 samples, 0.24%)</title><rect x="99.7609%" y="309" width="0.2391%" height="15" fill="rgb(219,179,1)" fg:x="5423" fg:w="13"/><text x="100.0109%" y="319.50"></text></g></svg></svg>