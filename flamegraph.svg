<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="13308"><g><title>sokobond-express`&lt;solver::Solver&lt;GlobalState,LocalState,Step&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="0.0000%" y="229" width="0.0225%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (21 samples, 0.16%)</title><rect x="0.0301%" y="213" width="0.1578%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="21"/><text x="0.2801%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (35 samples, 0.26%)</title><rect x="0.1879%" y="213" width="0.2630%" height="15" fill="rgb(221,193,54)" fg:x="25" fg:w="35"/><text x="0.4379%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (20 samples, 0.15%)</title><rect x="0.4509%" y="213" width="0.1503%" height="15" fill="rgb(248,212,6)" fg:x="60" fg:w="20"/><text x="0.7009%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (19 samples, 0.14%)</title><rect x="0.6011%" y="213" width="0.1428%" height="15" fill="rgb(208,68,35)" fg:x="80" fg:w="19"/><text x="0.8511%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.02%)</title><rect x="0.7439%" y="213" width="0.0150%" height="15" fill="rgb(232,128,0)" fg:x="99" fg:w="2"/><text x="0.9939%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 0.16%)</title><rect x="0.7589%" y="213" width="0.1578%" height="15" fill="rgb(207,160,47)" fg:x="101" fg:w="21"/><text x="1.0089%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.03%)</title><rect x="0.9167%" y="213" width="0.0301%" height="15" fill="rgb(228,23,34)" fg:x="122" fg:w="4"/><text x="1.1667%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (264 samples, 1.98%)</title><rect x="0.9468%" y="213" width="1.9838%" height="15" fill="rgb(218,30,26)" fg:x="126" fg:w="264"/><text x="1.1968%" y="223.50">l..</text></g><g><title>sokobond-express`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (522 samples, 3.92%)</title><rect x="2.9306%" y="213" width="3.9225%" height="15" fill="rgb(220,122,19)" fg:x="390" fg:w="522"/><text x="3.1806%" y="223.50">soko..</text></g><g><title>sokobond-express`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (25 samples, 0.19%)</title><rect x="6.8530%" y="213" width="0.1879%" height="15" fill="rgb(250,228,42)" fg:x="912" fg:w="25"/><text x="7.1030%" y="223.50"></text></g><g><title>sokobond-express`&lt;sokobond_express::Local as solver::State&lt;sokobond_express::Global,sokobond_express::Step&gt;&gt;::next_states (2 samples, 0.02%)</title><rect x="7.0484%" y="213" width="0.0150%" height="15" fill="rgb(240,193,28)" fg:x="938" fg:w="2"/><text x="7.2984%" y="223.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (2 samples, 0.02%)</title><rect x="12.3384%" y="197" width="0.0150%" height="15" fill="rgb(216,20,37)" fg:x="1642" fg:w="2"/><text x="12.5884%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (21 samples, 0.16%)</title><rect x="12.3535%" y="197" width="0.1578%" height="15" fill="rgb(206,188,39)" fg:x="1644" fg:w="21"/><text x="12.6035%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (188 samples, 1.41%)</title><rect x="12.5113%" y="197" width="1.4127%" height="15" fill="rgb(217,207,13)" fg:x="1665" fg:w="188"/><text x="12.7613%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (15 samples, 0.11%)</title><rect x="13.9240%" y="197" width="0.1127%" height="15" fill="rgb(231,73,38)" fg:x="1853" fg:w="15"/><text x="14.1740%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.02%)</title><rect x="14.0367%" y="197" width="0.0150%" height="15" fill="rgb(225,20,46)" fg:x="1868" fg:w="2"/><text x="14.2867%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (27 samples, 0.20%)</title><rect x="14.0517%" y="197" width="0.2029%" height="15" fill="rgb(210,31,41)" fg:x="1870" fg:w="27"/><text x="14.3017%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (15 samples, 0.11%)</title><rect x="14.1419%" y="181" width="0.1127%" height="15" fill="rgb(221,200,47)" fg:x="1882" fg:w="15"/><text x="14.3919%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.05%)</title><rect x="14.2095%" y="165" width="0.0451%" height="15" fill="rgb(226,26,5)" fg:x="1891" fg:w="6"/><text x="14.4595%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (14 samples, 0.11%)</title><rect x="14.2546%" y="197" width="0.1052%" height="15" fill="rgb(249,33,26)" fg:x="1897" fg:w="14"/><text x="14.5046%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (21 samples, 0.16%)</title><rect x="14.3598%" y="197" width="0.1578%" height="15" fill="rgb(235,183,28)" fg:x="1911" fg:w="21"/><text x="14.6098%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (7 samples, 0.05%)</title><rect x="14.4650%" y="181" width="0.0526%" height="15" fill="rgb(221,5,38)" fg:x="1925" fg:w="7"/><text x="14.7150%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (256 samples, 1.92%)</title><rect x="14.5176%" y="197" width="1.9237%" height="15" fill="rgb(247,18,42)" fg:x="1932" fg:w="256"/><text x="14.7676%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (7 samples, 0.05%)</title><rect x="16.6967%" y="181" width="0.0526%" height="15" fill="rgb(241,131,45)" fg:x="2222" fg:w="7"/><text x="16.9467%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.05%)</title><rect x="16.7493%" y="181" width="0.0526%" height="15" fill="rgb(249,31,29)" fg:x="2229" fg:w="7"/><text x="16.9993%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages_plat (2 samples, 0.02%)</title><rect x="17.0198%" y="165" width="0.0150%" height="15" fill="rgb(225,111,53)" fg:x="2265" fg:w="2"/><text x="17.2698%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (2 samples, 0.02%)</title><rect x="17.0198%" y="149" width="0.0150%" height="15" fill="rgb(238,160,17)" fg:x="2265" fg:w="2"/><text x="17.2698%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (56 samples, 0.42%)</title><rect x="17.0349%" y="165" width="0.4208%" height="15" fill="rgb(214,148,48)" fg:x="2267" fg:w="56"/><text x="17.2849%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (4 samples, 0.03%)</title><rect x="17.4557%" y="165" width="0.0301%" height="15" fill="rgb(232,36,49)" fg:x="2323" fg:w="4"/><text x="17.7057%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (5 samples, 0.04%)</title><rect x="18.0718%" y="149" width="0.0376%" height="15" fill="rgb(209,103,24)" fg:x="2405" fg:w="5"/><text x="18.3218%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (236 samples, 1.77%)</title><rect x="16.4488%" y="197" width="1.7734%" height="15" fill="rgb(229,88,8)" fg:x="2189" fg:w="236"/><text x="16.6988%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (189 samples, 1.42%)</title><rect x="16.8019%" y="181" width="1.4202%" height="15" fill="rgb(213,181,19)" fg:x="2236" fg:w="189"/><text x="17.0519%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (97 samples, 0.73%)</title><rect x="17.4932%" y="165" width="0.7289%" height="15" fill="rgb(254,191,54)" fg:x="2328" fg:w="97"/><text x="17.7432%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (15 samples, 0.11%)</title><rect x="18.1094%" y="149" width="0.1127%" height="15" fill="rgb(241,83,37)" fg:x="2410" fg:w="15"/><text x="18.3594%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.10%)</title><rect x="18.2296%" y="197" width="0.0977%" height="15" fill="rgb(233,36,39)" fg:x="2426" fg:w="13"/><text x="18.4796%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (383 samples, 2.88%)</title><rect x="18.3273%" y="197" width="2.8780%" height="15" fill="rgb(226,3,54)" fg:x="2439" fg:w="383"/><text x="18.5773%" y="207.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.02%)</title><rect x="21.2053%" y="197" width="0.0225%" height="15" fill="rgb(245,192,40)" fg:x="2822" fg:w="3"/><text x="21.4553%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (826 samples, 6.21%)</title><rect x="23.8729%" y="181" width="6.2068%" height="15" fill="rgb(238,167,29)" fg:x="3177" fg:w="826"/><text x="24.1229%" y="191.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (611 samples, 4.59%)</title><rect x="25.4884%" y="165" width="4.5912%" height="15" fill="rgb(232,182,51)" fg:x="3392" fg:w="611"/><text x="25.7384%" y="175.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.03%)</title><rect x="30.0496%" y="149" width="0.0301%" height="15" fill="rgb(231,60,39)" fg:x="3999" fg:w="4"/><text x="30.2996%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (4 samples, 0.03%)</title><rect x="30.1398%" y="165" width="0.0301%" height="15" fill="rgb(208,69,12)" fg:x="4011" fg:w="4"/><text x="30.3898%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages_plat (2 samples, 0.02%)</title><rect x="30.5155%" y="149" width="0.0150%" height="15" fill="rgb(235,93,37)" fg:x="4061" fg:w="2"/><text x="30.7655%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (2 samples, 0.02%)</title><rect x="30.5155%" y="133" width="0.0150%" height="15" fill="rgb(213,116,39)" fg:x="4061" fg:w="2"/><text x="30.7655%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (121 samples, 0.91%)</title><rect x="30.5305%" y="149" width="0.9092%" height="15" fill="rgb(222,207,29)" fg:x="4063" fg:w="121"/><text x="30.7805%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (2 samples, 0.02%)</title><rect x="31.4472%" y="149" width="0.0150%" height="15" fill="rgb(206,96,30)" fg:x="4185" fg:w="2"/><text x="31.6972%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (5 samples, 0.04%)</title><rect x="32.0258%" y="133" width="0.0376%" height="15" fill="rgb(218,138,4)" fg:x="4262" fg:w="5"/><text x="32.2758%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (277 samples, 2.08%)</title><rect x="30.0872%" y="181" width="2.0815%" height="15" fill="rgb(250,191,14)" fg:x="4004" fg:w="277"/><text x="30.3372%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (266 samples, 2.00%)</title><rect x="30.1698%" y="165" width="1.9988%" height="15" fill="rgb(239,60,40)" fg:x="4015" fg:w="266"/><text x="30.4198%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (94 samples, 0.71%)</title><rect x="31.4623%" y="149" width="0.7063%" height="15" fill="rgb(206,27,48)" fg:x="4187" fg:w="94"/><text x="31.7123%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14 samples, 0.11%)</title><rect x="32.0634%" y="133" width="0.1052%" height="15" fill="rgb(225,35,8)" fg:x="4267" fg:w="14"/><text x="32.3134%" y="143.50"></text></g><g><title>sokobond-express`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,471 samples, 11.05%)</title><rect x="21.2278%" y="197" width="11.0535%" height="15" fill="rgb(250,213,24)" fg:x="2825" fg:w="1471"/><text x="21.4778%" y="207.50">sokobond-express..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (15 samples, 0.11%)</title><rect x="32.1686%" y="181" width="0.1127%" height="15" fill="rgb(247,123,22)" fg:x="4281" fg:w="15"/><text x="32.4186%" y="191.50"></text></g><g><title>sokobond-express`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="32.2813%" y="197" width="0.0150%" height="15" fill="rgb(231,138,38)" fg:x="4296" fg:w="2"/><text x="32.5313%" y="207.50"></text></g><g><title>sokobond-express`&lt;sokobond_express::Local as solver::State&lt;sokobond_express::Global,sokobond_express::Step&gt;&gt;::is_solved (4 samples, 0.03%)</title><rect x="32.2964%" y="197" width="0.0301%" height="15" fill="rgb(231,145,46)" fg:x="4298" fg:w="4"/><text x="32.5464%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (32 samples, 0.24%)</title><rect x="32.9501%" y="181" width="0.2405%" height="15" fill="rgb(251,118,11)" fg:x="4385" fg:w="32"/><text x="33.2001%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (56 samples, 0.42%)</title><rect x="33.1906%" y="181" width="0.4208%" height="15" fill="rgb(217,147,25)" fg:x="4417" fg:w="56"/><text x="33.4406%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (13 samples, 0.10%)</title><rect x="33.6114%" y="181" width="0.0977%" height="15" fill="rgb(247,81,37)" fg:x="4473" fg:w="13"/><text x="33.8614%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.02%)</title><rect x="33.7166%" y="181" width="0.0150%" height="15" fill="rgb(209,12,38)" fg:x="4487" fg:w="2"/><text x="33.9666%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.02%)</title><rect x="33.7316%" y="181" width="0.0150%" height="15" fill="rgb(227,1,9)" fg:x="4489" fg:w="2"/><text x="33.9816%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (321 samples, 2.41%)</title><rect x="33.7466%" y="181" width="2.4121%" height="15" fill="rgb(248,47,43)" fg:x="4491" fg:w="321"/><text x="33.9966%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (5 samples, 0.04%)</title><rect x="36.1963%" y="165" width="0.0376%" height="15" fill="rgb(221,10,30)" fg:x="4817" fg:w="5"/><text x="36.4463%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.03%)</title><rect x="36.2338%" y="165" width="0.0301%" height="15" fill="rgb(210,229,1)" fg:x="4822" fg:w="4"/><text x="36.4838%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (27 samples, 0.20%)</title><rect x="36.3240%" y="149" width="0.2029%" height="15" fill="rgb(222,148,37)" fg:x="4834" fg:w="27"/><text x="36.5740%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (4 samples, 0.03%)</title><rect x="36.7749%" y="133" width="0.0301%" height="15" fill="rgb(234,67,33)" fg:x="4894" fg:w="4"/><text x="37.0249%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (126 samples, 0.95%)</title><rect x="36.1587%" y="181" width="0.9468%" height="15" fill="rgb(247,98,35)" fg:x="4812" fg:w="126"/><text x="36.4087%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (112 samples, 0.84%)</title><rect x="36.2639%" y="165" width="0.8416%" height="15" fill="rgb(247,138,52)" fg:x="4826" fg:w="112"/><text x="36.5139%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (76 samples, 0.57%)</title><rect x="36.5344%" y="149" width="0.5711%" height="15" fill="rgb(213,79,30)" fg:x="4862" fg:w="76"/><text x="36.7844%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (40 samples, 0.30%)</title><rect x="36.8049%" y="133" width="0.3006%" height="15" fill="rgb(246,177,23)" fg:x="4898" fg:w="40"/><text x="37.0549%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="37.1130%" y="181" width="0.0150%" height="15" fill="rgb(230,62,27)" fg:x="4939" fg:w="2"/><text x="37.3630%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (78 samples, 0.59%)</title><rect x="37.1280%" y="181" width="0.5861%" height="15" fill="rgb(216,154,8)" fg:x="4941" fg:w="78"/><text x="37.3780%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (177 samples, 1.33%)</title><rect x="38.4506%" y="165" width="1.3300%" height="15" fill="rgb(244,35,45)" fg:x="5117" fg:w="177"/><text x="38.7006%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (130 samples, 0.98%)</title><rect x="38.8037%" y="149" width="0.9769%" height="15" fill="rgb(251,115,12)" fg:x="5164" fg:w="130"/><text x="39.0537%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.03%)</title><rect x="39.8557%" y="149" width="0.0301%" height="15" fill="rgb(240,54,50)" fg:x="5304" fg:w="4"/><text x="40.1057%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (30 samples, 0.23%)</title><rect x="39.9234%" y="133" width="0.2254%" height="15" fill="rgb(233,84,52)" fg:x="5313" fg:w="30"/><text x="40.1734%" y="143.50"></text></g><g><title>sokobond-express`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (347 samples, 2.61%)</title><rect x="37.7142%" y="181" width="2.6075%" height="15" fill="rgb(207,117,47)" fg:x="5019" fg:w="347"/><text x="37.9642%" y="191.50">so..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (71 samples, 0.53%)</title><rect x="39.7881%" y="165" width="0.5335%" height="15" fill="rgb(249,43,39)" fg:x="5295" fg:w="71"/><text x="40.0381%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (58 samples, 0.44%)</title><rect x="39.8858%" y="149" width="0.4358%" height="15" fill="rgb(209,38,44)" fg:x="5308" fg:w="58"/><text x="40.1358%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (23 samples, 0.17%)</title><rect x="40.1488%" y="133" width="0.1728%" height="15" fill="rgb(236,212,23)" fg:x="5343" fg:w="23"/><text x="40.3988%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.05%)</title><rect x="40.2765%" y="117" width="0.0451%" height="15" fill="rgb(242,79,21)" fg:x="5360" fg:w="6"/><text x="40.5265%" y="127.50"></text></g><g><title>sokobond-express`&lt;solver::direction::Direction as core::convert::From&lt;solver::point::Point&gt;&gt;::from (146 samples, 1.10%)</title><rect x="40.3216%" y="181" width="1.0971%" height="15" fill="rgb(211,96,35)" fg:x="5366" fg:w="146"/><text x="40.5716%" y="191.50"></text></g><g><title>sokobond-express`DYLD-STUB$$free (11 samples, 0.08%)</title><rect x="41.4187%" y="181" width="0.0827%" height="15" fill="rgb(253,215,40)" fg:x="5512" fg:w="11"/><text x="41.6687%" y="191.50"></text></g><g><title>sokobond-express`DYLD-STUB$$malloc (4 samples, 0.03%)</title><rect x="41.5014%" y="181" width="0.0301%" height="15" fill="rgb(211,81,21)" fg:x="5523" fg:w="4"/><text x="41.7514%" y="191.50"></text></g><g><title>sokobond-express`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="41.5314%" y="181" width="0.0225%" height="15" fill="rgb(208,190,38)" fg:x="5527" fg:w="3"/><text x="41.7814%" y="191.50"></text></g><g><title>sokobond-express`__rdl_alloc (19 samples, 0.14%)</title><rect x="41.5540%" y="181" width="0.1428%" height="15" fill="rgb(235,213,38)" fg:x="5530" fg:w="19"/><text x="41.8040%" y="191.50"></text></g><g><title>sokobond-express`__rdl_dealloc (3 samples, 0.02%)</title><rect x="41.6967%" y="181" width="0.0225%" height="15" fill="rgb(237,122,38)" fg:x="5549" fg:w="3"/><text x="41.9467%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="41.7794%" y="165" width="0.0225%" height="15" fill="rgb(244,218,35)" fg:x="5560" fg:w="3"/><text x="42.0294%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="41.8094%" y="165" width="0.0150%" height="15" fill="rgb(240,68,47)" fg:x="5564" fg:w="2"/><text x="42.0594%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.02%)</title><rect x="41.8696%" y="133" width="0.0150%" height="15" fill="rgb(210,16,53)" fg:x="5572" fg:w="2"/><text x="42.1196%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.02%)</title><rect x="41.9071%" y="117" width="0.0225%" height="15" fill="rgb(235,124,12)" fg:x="5577" fg:w="3"/><text x="42.1571%" y="127.50"></text></g><g><title>sokobond-express`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (42 samples, 0.32%)</title><rect x="41.7193%" y="181" width="0.3156%" height="15" fill="rgb(224,169,11)" fg:x="5552" fg:w="42"/><text x="41.9693%" y="191.50"></text></g><g><title>sokobond-express`alloc::raw_vec::finish_grow (28 samples, 0.21%)</title><rect x="41.8245%" y="165" width="0.2104%" height="15" fill="rgb(250,166,2)" fg:x="5566" fg:w="28"/><text x="42.0745%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (25 samples, 0.19%)</title><rect x="41.8470%" y="149" width="0.1879%" height="15" fill="rgb(242,216,29)" fg:x="5569" fg:w="25"/><text x="42.0970%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (20 samples, 0.15%)</title><rect x="41.8846%" y="133" width="0.1503%" height="15" fill="rgb(230,116,27)" fg:x="5574" fg:w="20"/><text x="42.1346%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (14 samples, 0.11%)</title><rect x="41.9297%" y="117" width="0.1052%" height="15" fill="rgb(228,99,48)" fg:x="5580" fg:w="14"/><text x="42.1797%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.02%)</title><rect x="42.0198%" y="101" width="0.0150%" height="15" fill="rgb(253,11,6)" fg:x="5592" fg:w="2"/><text x="42.2698%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (77 samples, 0.58%)</title><rect x="42.1626%" y="165" width="0.5786%" height="15" fill="rgb(247,143,39)" fg:x="5611" fg:w="77"/><text x="42.4126%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (7 samples, 0.05%)</title><rect x="42.7412%" y="165" width="0.0526%" height="15" fill="rgb(236,97,10)" fg:x="5688" fg:w="7"/><text x="42.9912%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (2 samples, 0.02%)</title><rect x="42.9666%" y="149" width="0.0150%" height="15" fill="rgb(233,208,19)" fg:x="5718" fg:w="2"/><text x="43.2166%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.03%)</title><rect x="43.2597%" y="133" width="0.0301%" height="15" fill="rgb(216,164,2)" fg:x="5757" fg:w="4"/><text x="43.5097%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (72 samples, 0.54%)</title><rect x="42.7938%" y="165" width="0.5410%" height="15" fill="rgb(220,129,5)" fg:x="5695" fg:w="72"/><text x="43.0438%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (47 samples, 0.35%)</title><rect x="42.9817%" y="149" width="0.3532%" height="15" fill="rgb(242,17,10)" fg:x="5720" fg:w="47"/><text x="43.2317%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6 samples, 0.05%)</title><rect x="43.2898%" y="133" width="0.0451%" height="15" fill="rgb(242,107,0)" fg:x="5761" fg:w="6"/><text x="43.5398%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (12 samples, 0.09%)</title><rect x="43.3424%" y="165" width="0.0902%" height="15" fill="rgb(251,28,31)" fg:x="5768" fg:w="12"/><text x="43.5924%" y="175.50"></text></g><g><title>sokobond-express`core::ptr::drop_in_place&lt;sokobond_express::Local&gt; (206 samples, 1.55%)</title><rect x="42.0424%" y="181" width="1.5479%" height="15" fill="rgb(233,223,10)" fg:x="5595" fg:w="206"/><text x="42.2924%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (21 samples, 0.16%)</title><rect x="43.4325%" y="165" width="0.1578%" height="15" fill="rgb(215,21,27)" fg:x="5780" fg:w="21"/><text x="43.6825%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (7 samples, 0.05%)</title><rect x="46.5509%" y="149" width="0.0526%" height="15" fill="rgb(232,23,21)" fg:x="6195" fg:w="7"/><text x="46.8009%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="46.6035%" y="149" width="0.0150%" height="15" fill="rgb(244,5,23)" fg:x="6202" fg:w="2"/><text x="46.8535%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.02%)</title><rect x="46.6186%" y="149" width="0.0150%" height="15" fill="rgb(226,81,46)" fg:x="6204" fg:w="2"/><text x="46.8686%" y="159.50"></text></g><g><title>sokobond-express`DYLD-STUB$$realloc (2 samples, 0.02%)</title><rect x="46.6336%" y="149" width="0.0150%" height="15" fill="rgb(247,70,30)" fg:x="6206" fg:w="2"/><text x="46.8836%" y="159.50"></text></g><g><title>sokobond-express`__rdl_realloc (5 samples, 0.04%)</title><rect x="46.6486%" y="149" width="0.0376%" height="15" fill="rgb(212,68,19)" fg:x="6208" fg:w="5"/><text x="46.8986%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (2 samples, 0.02%)</title><rect x="46.7839%" y="101" width="0.0150%" height="15" fill="rgb(240,187,13)" fg:x="6226" fg:w="2"/><text x="47.0339%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (8 samples, 0.06%)</title><rect x="46.7989%" y="101" width="0.0601%" height="15" fill="rgb(223,113,26)" fg:x="6228" fg:w="8"/><text x="47.0489%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.02%)</title><rect x="46.8590%" y="101" width="0.0150%" height="15" fill="rgb(206,192,2)" fg:x="6236" fg:w="2"/><text x="47.1090%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.03%)</title><rect x="46.8891%" y="85" width="0.0301%" height="15" fill="rgb(241,108,4)" fg:x="6240" fg:w="4"/><text x="47.1391%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (2 samples, 0.02%)</title><rect x="46.9417%" y="53" width="0.0150%" height="15" fill="rgb(247,173,49)" fg:x="6247" fg:w="2"/><text x="47.1917%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.07%)</title><rect x="46.9191%" y="85" width="0.0676%" height="15" fill="rgb(224,114,35)" fg:x="6244" fg:w="9"/><text x="47.1691%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.07%)</title><rect x="46.9191%" y="69" width="0.0676%" height="15" fill="rgb(245,159,27)" fg:x="6244" fg:w="9"/><text x="47.1691%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.03%)</title><rect x="46.9567%" y="53" width="0.0301%" height="15" fill="rgb(245,172,44)" fg:x="6249" fg:w="4"/><text x="47.2067%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (15 samples, 0.11%)</title><rect x="46.8816%" y="101" width="0.1127%" height="15" fill="rgb(236,23,11)" fg:x="6239" fg:w="15"/><text x="47.1316%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.02%)</title><rect x="47.0845%" y="85" width="0.0225%" height="15" fill="rgb(205,117,38)" fg:x="6266" fg:w="3"/><text x="47.3345%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (6 samples, 0.05%)</title><rect x="47.1746%" y="69" width="0.0451%" height="15" fill="rgb(237,72,25)" fg:x="6278" fg:w="6"/><text x="47.4246%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (15 samples, 0.11%)</title><rect x="47.4301%" y="53" width="0.1127%" height="15" fill="rgb(244,70,9)" fg:x="6312" fg:w="15"/><text x="47.6801%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (64 samples, 0.48%)</title><rect x="47.1070%" y="85" width="0.4809%" height="15" fill="rgb(217,125,39)" fg:x="6269" fg:w="64"/><text x="47.3570%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (49 samples, 0.37%)</title><rect x="47.2197%" y="69" width="0.3682%" height="15" fill="rgb(235,36,10)" fg:x="6284" fg:w="49"/><text x="47.4697%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6 samples, 0.05%)</title><rect x="47.5428%" y="53" width="0.0451%" height="15" fill="rgb(251,123,47)" fg:x="6327" fg:w="6"/><text x="47.7928%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2 samples, 0.02%)</title><rect x="47.6105%" y="69" width="0.0150%" height="15" fill="rgb(221,13,13)" fg:x="6336" fg:w="2"/><text x="47.8605%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.03%)</title><rect x="47.6706%" y="53" width="0.0301%" height="15" fill="rgb(238,131,9)" fg:x="6344" fg:w="4"/><text x="47.9206%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (32 samples, 0.24%)</title><rect x="47.5879%" y="85" width="0.2405%" height="15" fill="rgb(211,50,8)" fg:x="6333" fg:w="32"/><text x="47.8379%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (26 samples, 0.20%)</title><rect x="47.6330%" y="69" width="0.1954%" height="15" fill="rgb(245,182,24)" fg:x="6339" fg:w="26"/><text x="47.8830%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (16 samples, 0.12%)</title><rect x="47.7081%" y="53" width="0.1202%" height="15" fill="rgb(242,14,37)" fg:x="6349" fg:w="16"/><text x="47.9581%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.02%)</title><rect x="47.8133%" y="37" width="0.0150%" height="15" fill="rgb(246,228,12)" fg:x="6363" fg:w="2"/><text x="48.0633%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.08%)</title><rect x="47.8284%" y="85" width="0.0751%" height="15" fill="rgb(213,55,15)" fg:x="6365" fg:w="10"/><text x="48.0784%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (10 samples, 0.08%)</title><rect x="47.8284%" y="69" width="0.0751%" height="15" fill="rgb(209,9,3)" fg:x="6365" fg:w="10"/><text x="48.0784%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.02%)</title><rect x="47.9035%" y="85" width="0.0225%" height="15" fill="rgb(230,59,30)" fg:x="6375" fg:w="3"/><text x="48.1535%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (19 samples, 0.14%)</title><rect x="47.9261%" y="85" width="0.1428%" height="15" fill="rgb(209,121,21)" fg:x="6378" fg:w="19"/><text x="48.1761%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (146 samples, 1.10%)</title><rect x="47.0093%" y="101" width="1.0971%" height="15" fill="rgb(220,109,13)" fg:x="6256" fg:w="146"/><text x="47.2593%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.04%)</title><rect x="48.0688%" y="85" width="0.0376%" height="15" fill="rgb(232,18,1)" fg:x="6397" fg:w="5"/><text x="48.3188%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (2 samples, 0.02%)</title><rect x="48.1064%" y="101" width="0.0150%" height="15" fill="rgb(215,41,42)" fg:x="6402" fg:w="2"/><text x="48.3564%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (227 samples, 1.71%)</title><rect x="46.7463%" y="117" width="1.7057%" height="15" fill="rgb(224,123,36)" fg:x="6221" fg:w="227"/><text x="46.9963%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (44 samples, 0.33%)</title><rect x="48.1214%" y="101" width="0.3306%" height="15" fill="rgb(240,125,3)" fg:x="6404" fg:w="44"/><text x="48.3714%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (5 samples, 0.04%)</title><rect x="48.4521%" y="117" width="0.0376%" height="15" fill="rgb(205,98,50)" fg:x="6448" fg:w="5"/><text x="48.7021%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (6 samples, 0.05%)</title><rect x="48.4896%" y="117" width="0.0451%" height="15" fill="rgb(205,185,37)" fg:x="6453" fg:w="6"/><text x="48.7396%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.02%)</title><rect x="48.5347%" y="117" width="0.0150%" height="15" fill="rgb(238,207,15)" fg:x="6459" fg:w="2"/><text x="48.7847%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (261 samples, 1.96%)</title><rect x="46.7087%" y="133" width="1.9612%" height="15" fill="rgb(213,199,42)" fg:x="6216" fg:w="261"/><text x="46.9587%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (16 samples, 0.12%)</title><rect x="48.5497%" y="117" width="0.1202%" height="15" fill="rgb(235,201,11)" fg:x="6461" fg:w="16"/><text x="48.7997%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (14 samples, 0.11%)</title><rect x="48.5648%" y="101" width="0.1052%" height="15" fill="rgb(207,46,11)" fg:x="6463" fg:w="14"/><text x="48.8148%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (5 samples, 0.04%)</title><rect x="48.6700%" y="133" width="0.0376%" height="15" fill="rgb(241,35,35)" fg:x="6477" fg:w="5"/><text x="48.9200%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.02%)</title><rect x="48.6850%" y="117" width="0.0225%" height="15" fill="rgb(243,32,47)" fg:x="6479" fg:w="3"/><text x="48.9350%" y="127.50"></text></g><g><title>sokobond-express`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (294 samples, 2.21%)</title><rect x="46.5059%" y="165" width="2.2092%" height="15" fill="rgb(247,202,23)" fg:x="6189" fg:w="294"/><text x="46.7559%" y="175.50">s..</text></g><g><title>sokobond-express`alloc::raw_vec::finish_grow (270 samples, 2.03%)</title><rect x="46.6862%" y="149" width="2.0289%" height="15" fill="rgb(219,102,11)" fg:x="6213" fg:w="270"/><text x="46.9362%" y="159.50">s..</text></g><g><title>sokobond-express`alloc::raw_vec::finish_grow (5 samples, 0.04%)</title><rect x="48.7226%" y="165" width="0.0376%" height="15" fill="rgb(243,110,44)" fg:x="6484" fg:w="5"/><text x="48.9726%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="48.7827%" y="149" width="0.0150%" height="15" fill="rgb(222,74,54)" fg:x="6492" fg:w="2"/><text x="49.0327%" y="159.50"></text></g><g><title>sokobond-express`sokobond_express::Local::maybe_move (695 samples, 5.22%)</title><rect x="43.5903%" y="181" width="5.2224%" height="15" fill="rgb(216,99,12)" fg:x="5801" fg:w="695"/><text x="43.8403%" y="191.50">sokobo..</text></g><g><title>sokobond-express`core::ptr::drop_in_place&lt;sokobond_express::Molecule&gt; (7 samples, 0.05%)</title><rect x="48.7601%" y="165" width="0.0526%" height="15" fill="rgb(226,22,26)" fg:x="6489" fg:w="7"/><text x="49.0101%" y="175.50"></text></g><g><title>sokobond-express`&lt;sokobond_express::Local as solver::State&lt;sokobond_express::Global,sokobond_express::Step&gt;&gt;::next_states (2,219 samples, 16.67%)</title><rect x="32.3264%" y="197" width="16.6742%" height="15" fill="rgb(217,163,10)" fg:x="4302" fg:w="2219"/><text x="32.5764%" y="207.50">sokobond-express`&lt;sokobond..</text></g><g><title>sokobond-express`solver::point::Point::manhattan_distance (25 samples, 0.19%)</title><rect x="48.8127%" y="181" width="0.1879%" height="15" fill="rgb(213,25,53)" fg:x="6496" fg:w="25"/><text x="49.0627%" y="191.50"></text></g><g><title>sokobond-express`DYLD-STUB$$free (7 samples, 0.05%)</title><rect x="49.0081%" y="197" width="0.0526%" height="15" fill="rgb(252,105,26)" fg:x="6522" fg:w="7"/><text x="49.2581%" y="207.50"></text></g><g><title>sokobond-express`DYLD-STUB$$malloc (45 samples, 0.34%)</title><rect x="49.0607%" y="197" width="0.3381%" height="15" fill="rgb(220,39,43)" fg:x="6529" fg:w="45"/><text x="49.3107%" y="207.50"></text></g><g><title>sokobond-express`DYLD-STUB$$memcpy (15 samples, 0.11%)</title><rect x="49.3989%" y="197" width="0.1127%" height="15" fill="rgb(229,68,48)" fg:x="6574" fg:w="15"/><text x="49.6489%" y="207.50"></text></g><g><title>sokobond-express`__rdl_alloc (65 samples, 0.49%)</title><rect x="49.5116%" y="197" width="0.4884%" height="15" fill="rgb(252,8,32)" fg:x="6589" fg:w="65"/><text x="49.7616%" y="207.50"></text></g><g><title>sokobond-express`core::hash::Hash::hash_slice (233 samples, 1.75%)</title><rect x="50.0150%" y="197" width="1.7508%" height="15" fill="rgb(223,20,43)" fg:x="6656" fg:w="233"/><text x="50.2650%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (3 samples, 0.02%)</title><rect x="51.8410%" y="181" width="0.0225%" height="15" fill="rgb(229,81,49)" fg:x="6899" fg:w="3"/><text x="52.0910%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (2 samples, 0.02%)</title><rect x="51.8635%" y="181" width="0.0150%" height="15" fill="rgb(236,28,36)" fg:x="6902" fg:w="2"/><text x="52.1135%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (78 samples, 0.59%)</title><rect x="51.8786%" y="181" width="0.5861%" height="15" fill="rgb(249,185,26)" fg:x="6904" fg:w="78"/><text x="52.1286%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (7 samples, 0.05%)</title><rect x="52.4647%" y="181" width="0.0526%" height="15" fill="rgb(249,174,33)" fg:x="6982" fg:w="7"/><text x="52.7147%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (4 samples, 0.03%)</title><rect x="52.6300%" y="165" width="0.0301%" height="15" fill="rgb(233,201,37)" fg:x="7004" fg:w="4"/><text x="52.8800%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.02%)</title><rect x="52.6601%" y="165" width="0.0150%" height="15" fill="rgb(221,78,26)" fg:x="7008" fg:w="2"/><text x="52.9101%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (10 samples, 0.08%)</title><rect x="53.1410%" y="149" width="0.0751%" height="15" fill="rgb(250,127,30)" fg:x="7072" fg:w="10"/><text x="53.3910%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (24 samples, 0.18%)</title><rect x="53.2161%" y="149" width="0.1803%" height="15" fill="rgb(230,49,44)" fg:x="7082" fg:w="24"/><text x="53.4661%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (15 samples, 0.11%)</title><rect x="53.3965%" y="149" width="0.1127%" height="15" fill="rgb(229,67,23)" fg:x="7106" fg:w="15"/><text x="53.6465%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (6 samples, 0.05%)</title><rect x="53.5092%" y="149" width="0.0451%" height="15" fill="rgb(249,83,47)" fg:x="7121" fg:w="6"/><text x="53.7592%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (143 samples, 1.07%)</title><rect x="52.5173%" y="181" width="1.0745%" height="15" fill="rgb(215,43,3)" fg:x="6989" fg:w="143"/><text x="52.7673%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (122 samples, 0.92%)</title><rect x="52.6751%" y="165" width="0.9167%" height="15" fill="rgb(238,154,13)" fg:x="7010" fg:w="122"/><text x="52.9251%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (5 samples, 0.04%)</title><rect x="53.5543%" y="149" width="0.0376%" height="15" fill="rgb(219,56,2)" fg:x="7127" fg:w="5"/><text x="53.8043%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 0.02%)</title><rect x="53.5918%" y="181" width="0.0225%" height="15" fill="rgb(233,0,4)" fg:x="7132" fg:w="3"/><text x="53.8418%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (3 samples, 0.02%)</title><rect x="53.5918%" y="165" width="0.0225%" height="15" fill="rgb(235,30,7)" fg:x="7132" fg:w="3"/><text x="53.8418%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.02%)</title><rect x="53.5918%" y="149" width="0.0225%" height="15" fill="rgb(250,79,13)" fg:x="7132" fg:w="3"/><text x="53.8418%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.04%)</title><rect x="53.6144%" y="181" width="0.0376%" height="15" fill="rgb(211,146,34)" fg:x="7135" fg:w="5"/><text x="53.8644%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (4 samples, 0.03%)</title><rect x="53.6519%" y="181" width="0.0301%" height="15" fill="rgb(228,22,38)" fg:x="7140" fg:w="4"/><text x="53.9019%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (55 samples, 0.41%)</title><rect x="53.6820%" y="181" width="0.4133%" height="15" fill="rgb(235,168,5)" fg:x="7144" fg:w="55"/><text x="53.9320%" y="191.50"></text></g><g><title>sokobond-express`core::ptr::drop_in_place&lt;sokobond_express::Local&gt; (311 samples, 2.34%)</title><rect x="51.7659%" y="197" width="2.3369%" height="15" fill="rgb(221,155,16)" fg:x="6889" fg:w="311"/><text x="52.0159%" y="207.50">s..</text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.02%)</title><rect x="56.8380%" y="181" width="0.0150%" height="15" fill="rgb(215,215,53)" fg:x="7564" fg:w="2"/><text x="57.0880%" y="191.50"></text></g><g><title>sokobond-express`core::hash::Hash::hash_slice (942 samples, 7.08%)</title><rect x="56.8530%" y="181" width="7.0784%" height="15" fill="rgb(223,4,10)" fg:x="7566" fg:w="942"/><text x="57.1030%" y="191.50">sokobond-..</text></g><g><title>libsystem_malloc.dylib`_szone_free (16 samples, 0.12%)</title><rect x="71.3030%" y="165" width="0.1202%" height="15" fill="rgb(234,103,6)" fg:x="9489" fg:w="16"/><text x="71.5530%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (16 samples, 0.12%)</title><rect x="71.3030%" y="149" width="0.1202%" height="15" fill="rgb(227,97,0)" fg:x="9489" fg:w="16"/><text x="71.5530%" y="159.50"></text></g><g><title>sokobond-express`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,306 samples, 17.33%)</title><rect x="54.1028%" y="197" width="17.3279%" height="15" fill="rgb(234,150,53)" fg:x="7200" fg:w="2306"/><text x="54.3528%" y="207.50">sokobond-express`hashbrown:..</text></g><g><title>sokobond-express`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (998 samples, 7.50%)</title><rect x="63.9315%" y="181" width="7.4992%" height="15" fill="rgb(228,201,54)" fg:x="8508" fg:w="998"/><text x="64.1815%" y="191.50">sokobond-e..</text></g><g><title>sokobond-express`core::hash::Hash::hash_slice (6 samples, 0.05%)</title><rect x="71.4382%" y="181" width="0.0451%" height="15" fill="rgb(222,22,37)" fg:x="9507" fg:w="6"/><text x="71.6882%" y="191.50"></text></g><g><title>sokobond-express`core::hash::Hasher::write_isize (938 samples, 7.05%)</title><rect x="71.4833%" y="181" width="7.0484%" height="15" fill="rgb(237,53,32)" fg:x="9513" fg:w="938"/><text x="71.7333%" y="191.50">sokobond-..</text></g><g><title>sokobond-express`core::hash::Hasher::write_usize (72 samples, 0.54%)</title><rect x="78.5317%" y="181" width="0.5410%" height="15" fill="rgb(233,25,53)" fg:x="10451" fg:w="72"/><text x="78.7817%" y="191.50"></text></g><g><title>sokobond-express`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (172 samples, 1.29%)</title><rect x="79.3433%" y="165" width="1.2925%" height="15" fill="rgb(210,40,34)" fg:x="10559" fg:w="172"/><text x="79.5933%" y="175.50"></text></g><g><title>sokobond-express`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (537 samples, 4.04%)</title><rect x="79.0727%" y="181" width="4.0352%" height="15" fill="rgb(241,220,44)" fg:x="10523" fg:w="537"/><text x="79.3227%" y="191.50">soko..</text></g><g><title>sokobond-express`core::hash::Hash::hash_slice (329 samples, 2.47%)</title><rect x="80.6357%" y="165" width="2.4722%" height="15" fill="rgb(235,28,35)" fg:x="10731" fg:w="329"/><text x="80.8857%" y="175.50">so..</text></g><g><title>sokobond-express`indexmap::map::IndexMap&lt;K,V,S&gt;::get (1,618 samples, 12.16%)</title><rect x="71.4307%" y="197" width="12.1581%" height="15" fill="rgb(210,56,17)" fg:x="9506" fg:w="1618"/><text x="71.6807%" y="207.50">sokobond-express`i..</text></g><g><title>sokobond-express`indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (64 samples, 0.48%)</title><rect x="83.1079%" y="181" width="0.4809%" height="15" fill="rgb(224,130,29)" fg:x="11060" fg:w="64"/><text x="83.3579%" y="191.50"></text></g><g><title>sokobond-express`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (9 samples, 0.07%)</title><rect x="83.5888%" y="197" width="0.0676%" height="15" fill="rgb(235,212,8)" fg:x="11124" fg:w="9"/><text x="83.8388%" y="207.50"></text></g><g><title>sokobond-express`indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_unique (8 samples, 0.06%)</title><rect x="83.6640%" y="197" width="0.0601%" height="15" fill="rgb(223,33,50)" fg:x="11134" fg:w="8"/><text x="83.9140%" y="207.50"></text></g><g><title>sokobond-express`indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (4 samples, 0.03%)</title><rect x="83.7241%" y="197" width="0.0301%" height="15" fill="rgb(219,149,13)" fg:x="11142" fg:w="4"/><text x="83.9741%" y="207.50"></text></g><g><title>sokobond-express`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (7 samples, 0.05%)</title><rect x="83.7541%" y="197" width="0.0526%" height="15" fill="rgb(250,156,29)" fg:x="11146" fg:w="7"/><text x="84.0041%" y="207.50"></text></g><g><title>sokobond-express`keyed_priority_queue::editable_binary_heap::BinaryHeap&lt;TPriority&gt;::heapify_up (3 samples, 0.02%)</title><rect x="83.8067%" y="197" width="0.0225%" height="15" fill="rgb(216,193,19)" fg:x="11153" fg:w="3"/><text x="84.0567%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (29 samples, 0.22%)</title><rect x="83.8593%" y="181" width="0.2179%" height="15" fill="rgb(216,135,14)" fg:x="11160" fg:w="29"/><text x="84.1093%" y="191.50"></text></g><g><title>sokobond-express`DYLD-STUB$$memmove (2 samples, 0.02%)</title><rect x="84.0772%" y="181" width="0.0150%" height="15" fill="rgb(241,47,5)" fg:x="11189" fg:w="2"/><text x="84.3272%" y="191.50"></text></g><g><title>sokobond-express`indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (46 samples, 0.35%)</title><rect x="84.0923%" y="181" width="0.3457%" height="15" fill="rgb(233,42,35)" fg:x="11191" fg:w="46"/><text x="84.3423%" y="191.50"></text></g><g><title>sokobond-express`keyed_priority_queue::keyed_priority_queue::KeyedPriorityQueue&lt;TKey,TPriority,S&gt;::pop (222 samples, 1.67%)</title><rect x="83.8293%" y="197" width="1.6682%" height="15" fill="rgb(231,13,6)" fg:x="11156" fg:w="222"/><text x="84.0793%" y="207.50"></text></g><g><title>sokobond-express`keyed_priority_queue::editable_binary_heap::BinaryHeap&lt;TPriority&gt;::remove (141 samples, 1.06%)</title><rect x="84.4379%" y="181" width="1.0595%" height="15" fill="rgb(207,181,40)" fg:x="11237" fg:w="141"/><text x="84.6879%" y="191.50"></text></g><g><title>sokobond-express`core::hash::Hash::hash_slice (3 samples, 0.02%)</title><rect x="85.7229%" y="181" width="0.0225%" height="15" fill="rgb(254,173,49)" fg:x="11408" fg:w="3"/><text x="85.9729%" y="191.50"></text></g><g><title>sokobond-express`core::hash::Hasher::write_isize (501 samples, 3.76%)</title><rect x="85.7454%" y="181" width="3.7647%" height="15" fill="rgb(221,1,38)" fg:x="11411" fg:w="501"/><text x="85.9954%" y="191.50">soko..</text></g><g><title>sokobond-express`core::hash::Hasher::write_usize (56 samples, 0.42%)</title><rect x="89.5101%" y="181" width="0.4208%" height="15" fill="rgb(206,124,46)" fg:x="11912" fg:w="56"/><text x="89.7601%" y="191.50"></text></g><g><title>sokobond-express`hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (7 samples, 0.05%)</title><rect x="89.9309%" y="181" width="0.0526%" height="15" fill="rgb(249,21,11)" fg:x="11968" fg:w="7"/><text x="90.1809%" y="191.50"></text></g><g><title>sokobond-express`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (152 samples, 1.14%)</title><rect x="90.2014%" y="165" width="1.1422%" height="15" fill="rgb(222,201,40)" fg:x="12004" fg:w="152"/><text x="90.4514%" y="175.50"></text></g><g><title>sokobond-express`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (548 samples, 4.12%)</title><rect x="89.9835%" y="181" width="4.1178%" height="15" fill="rgb(235,61,29)" fg:x="11975" fg:w="548"/><text x="90.2335%" y="191.50">soko..</text></g><g><title>sokobond-express`core::hash::Hash::hash_slice (367 samples, 2.76%)</title><rect x="91.3436%" y="165" width="2.7577%" height="15" fill="rgb(219,207,3)" fg:x="12156" fg:w="367"/><text x="91.5936%" y="175.50">so..</text></g><g><title>sokobond-express`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="94.2215%" y="165" width="0.0150%" height="15" fill="rgb(222,56,46)" fg:x="12539" fg:w="2"/><text x="94.4715%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.02%)</title><rect x="94.2215%" y="149" width="0.0150%" height="15" fill="rgb(239,76,54)" fg:x="12539" fg:w="2"/><text x="94.4715%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.02%)</title><rect x="94.2215%" y="133" width="0.0150%" height="15" fill="rgb(231,124,27)" fg:x="12539" fg:w="2"/><text x="94.4715%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.02%)</title><rect x="94.2215%" y="117" width="0.0150%" height="15" fill="rgb(249,195,6)" fg:x="12539" fg:w="2"/><text x="94.4715%" y="127.50"></text></g><g><title>sokobond-express`indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_unique (52 samples, 0.39%)</title><rect x="94.1013%" y="181" width="0.3907%" height="15" fill="rgb(237,174,47)" fg:x="12523" fg:w="52"/><text x="94.3513%" y="191.50"></text></g><g><title>sokobond-express`hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (34 samples, 0.26%)</title><rect x="94.2365%" y="165" width="0.2555%" height="15" fill="rgb(206,201,31)" fg:x="12541" fg:w="34"/><text x="94.4865%" y="175.50"></text></g><g><title>sokobond-express`hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (25 samples, 0.19%)</title><rect x="94.3042%" y="149" width="0.1879%" height="15" fill="rgb(231,57,52)" fg:x="12550" fg:w="25"/><text x="94.5542%" y="159.50"></text></g><g><title>sokobond-express`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (41 samples, 0.31%)</title><rect x="94.4920%" y="181" width="0.3081%" height="15" fill="rgb(248,177,22)" fg:x="12575" fg:w="41"/><text x="94.7420%" y="191.50"></text></g><g><title>sokobond-express`keyed_priority_queue::keyed_priority_queue::KeyedPriorityQueue&lt;TKey,TPriority,S&gt;::push (1,243 samples, 9.34%)</title><rect x="85.4974%" y="197" width="9.3402%" height="15" fill="rgb(215,211,37)" fg:x="11378" fg:w="1243"/><text x="85.7474%" y="207.50">sokobond-expr..</text></g><g><title>sokobond-express`keyed_priority_queue::editable_binary_heap::BinaryHeap&lt;TPriority&gt;::heapify_up (5 samples, 0.04%)</title><rect x="94.8001%" y="181" width="0.0376%" height="15" fill="rgb(241,128,51)" fg:x="12616" fg:w="5"/><text x="95.0501%" y="191.50"></text></g><g><title>sokobond-express`sokobond_express::Local::maybe_move (6 samples, 0.05%)</title><rect x="94.8377%" y="197" width="0.0451%" height="15" fill="rgb(227,165,31)" fg:x="12621" fg:w="6"/><text x="95.0877%" y="207.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_absolute_time (2 samples, 0.02%)</title><rect x="94.9203%" y="165" width="0.0150%" height="15" fill="rgb(228,167,24)" fg:x="12632" fg:w="2"/><text x="95.1703%" y="175.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (3 samples, 0.02%)</title><rect x="94.9354%" y="165" width="0.0225%" height="15" fill="rgb(228,143,12)" fg:x="12634" fg:w="3"/><text x="95.1854%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (2 samples, 0.02%)</title><rect x="94.9429%" y="149" width="0.0150%" height="15" fill="rgb(249,149,8)" fg:x="12635" fg:w="2"/><text x="95.1929%" y="159.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (28 samples, 0.21%)</title><rect x="94.9203%" y="181" width="0.2104%" height="15" fill="rgb(243,35,44)" fg:x="12632" fg:w="28"/><text x="95.1703%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (23 samples, 0.17%)</title><rect x="94.9579%" y="165" width="0.1728%" height="15" fill="rgb(246,89,9)" fg:x="12637" fg:w="23"/><text x="95.2079%" y="175.50"></text></g><g><title>sokobond-express`std::sys::pal::unix::time::Timespec::now (34 samples, 0.26%)</title><rect x="94.8828%" y="197" width="0.2555%" height="15" fill="rgb(233,213,13)" fg:x="12627" fg:w="34"/><text x="95.1328%" y="207.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_timebase_info (2 samples, 0.02%)</title><rect x="95.1758%" y="149" width="0.0150%" height="15" fill="rgb(233,141,41)" fg:x="12666" fg:w="2"/><text x="95.4258%" y="159.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (6 samples, 0.05%)</title><rect x="95.1909%" y="149" width="0.0451%" height="15" fill="rgb(239,167,4)" fg:x="12668" fg:w="6"/><text x="95.4409%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (129 samples, 0.97%)</title><rect x="95.2359%" y="149" width="0.9693%" height="15" fill="rgb(209,217,16)" fg:x="12674" fg:w="129"/><text x="95.4859%" y="159.50"></text></g><g><title>sokobond-express`std::time::Instant::elapsed (144 samples, 1.08%)</title><rect x="95.1458%" y="197" width="1.0821%" height="15" fill="rgb(219,88,35)" fg:x="12662" fg:w="144"/><text x="95.3958%" y="207.50"></text></g><g><title>sokobond-express`std::sys::pal::unix::time::Timespec::now (144 samples, 1.08%)</title><rect x="95.1458%" y="181" width="1.0821%" height="15" fill="rgb(220,193,23)" fg:x="12662" fg:w="144"/><text x="95.3958%" y="191.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (141 samples, 1.06%)</title><rect x="95.1683%" y="165" width="1.0595%" height="15" fill="rgb(230,90,52)" fg:x="12665" fg:w="141"/><text x="95.4183%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (3 samples, 0.02%)</title><rect x="96.2053%" y="149" width="0.0225%" height="15" fill="rgb(252,106,19)" fg:x="12803" fg:w="3"/><text x="96.4553%" y="159.50"></text></g><g><title>sokobond-express`&lt;solver::Solver&lt;GlobalState,LocalState,Step&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,867 samples, 89.17%)</title><rect x="7.0634%" y="213" width="89.1719%" height="15" fill="rgb(206,74,20)" fg:x="940" fg:w="11867"/><text x="7.3134%" y="223.50">sokobond-express`&lt;solver::Solver&lt;GlobalState,LocalState,Step&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>sokobond-express`DYLD-STUB$$free (11 samples, 0.08%)</title><rect x="96.2353%" y="213" width="0.0827%" height="15" fill="rgb(230,138,44)" fg:x="12807" fg:w="11"/><text x="96.4853%" y="223.50"></text></g><g><title>sokobond-express`DYLD-STUB$$malloc (9 samples, 0.07%)</title><rect x="96.3180%" y="213" width="0.0676%" height="15" fill="rgb(235,182,43)" fg:x="12818" fg:w="9"/><text x="96.5680%" y="223.50"></text></g><g><title>sokobond-express`DYLD-STUB$$memcpy (13 samples, 0.10%)</title><rect x="96.3856%" y="213" width="0.0977%" height="15" fill="rgb(242,16,51)" fg:x="12827" fg:w="13"/><text x="96.6356%" y="223.50"></text></g><g><title>sokobond-express`__rdl_alloc (13 samples, 0.10%)</title><rect x="96.4833%" y="213" width="0.0977%" height="15" fill="rgb(248,9,4)" fg:x="12840" fg:w="13"/><text x="96.7333%" y="223.50"></text></g><g><title>sokobond-express`core::hash::Hash::hash_slice (254 samples, 1.91%)</title><rect x="96.5810%" y="213" width="1.9086%" height="15" fill="rgb(210,31,22)" fg:x="12853" fg:w="254"/><text x="96.8310%" y="223.50">s..</text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (3 samples, 0.02%)</title><rect x="98.5497%" y="197" width="0.0225%" height="15" fill="rgb(239,54,39)" fg:x="13115" fg:w="3"/><text x="98.7997%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (64 samples, 0.48%)</title><rect x="98.5723%" y="197" width="0.4809%" height="15" fill="rgb(230,99,41)" fg:x="13118" fg:w="64"/><text x="98.8223%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (6 samples, 0.05%)</title><rect x="99.0532%" y="197" width="0.0451%" height="15" fill="rgb(253,106,12)" fg:x="13182" fg:w="6"/><text x="99.3032%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (2 samples, 0.02%)</title><rect x="99.2260%" y="181" width="0.0150%" height="15" fill="rgb(213,46,41)" fg:x="13205" fg:w="2"/><text x="99.4760%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.08%)</title><rect x="99.4364%" y="165" width="0.0827%" height="15" fill="rgb(215,133,35)" fg:x="13233" fg:w="11"/><text x="99.6864%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (66 samples, 0.50%)</title><rect x="99.0983%" y="197" width="0.4959%" height="15" fill="rgb(213,28,5)" fg:x="13188" fg:w="66"/><text x="99.3483%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (46 samples, 0.35%)</title><rect x="99.2486%" y="181" width="0.3457%" height="15" fill="rgb(215,77,49)" fg:x="13208" fg:w="46"/><text x="99.4986%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (10 samples, 0.08%)</title><rect x="99.5191%" y="165" width="0.0751%" height="15" fill="rgb(248,100,22)" fg:x="13244" fg:w="10"/><text x="99.7691%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.02%)</title><rect x="99.5942%" y="197" width="0.0150%" height="15" fill="rgb(208,67,9)" fg:x="13254" fg:w="2"/><text x="99.8442%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (5 samples, 0.04%)</title><rect x="99.6093%" y="197" width="0.0376%" height="15" fill="rgb(219,133,21)" fg:x="13256" fg:w="5"/><text x="99.8593%" y="207.50"></text></g><g><title>sokobond-express`core::ptr::drop_in_place&lt;sokobond_express::Local&gt; (175 samples, 1.31%)</title><rect x="98.4896%" y="213" width="1.3150%" height="15" fill="rgb(246,46,29)" fg:x="13107" fg:w="175"/><text x="98.7396%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (21 samples, 0.16%)</title><rect x="99.6468%" y="197" width="0.1578%" height="15" fill="rgb(246,185,52)" fg:x="13261" fg:w="21"/><text x="99.8968%" y="207.50"></text></g><g><title>sokobond-express`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (15 samples, 0.11%)</title><rect x="99.8046%" y="213" width="0.1127%" height="15" fill="rgb(252,136,11)" fg:x="13282" fg:w="15"/><text x="100.0546%" y="223.50"></text></g><g><title>sokobond-express`keyed_priority_queue::keyed_priority_queue::KeyedPriorityQueue&lt;TKey,TPriority,S&gt;::pop (2 samples, 0.02%)</title><rect x="99.9173%" y="213" width="0.0150%" height="15" fill="rgb(219,138,53)" fg:x="13297" fg:w="2"/><text x="100.1673%" y="223.50"></text></g><g><title>sokobond-express`keyed_priority_queue::keyed_priority_queue::KeyedPriorityQueue&lt;TKey,TPriority,S&gt;::push (8 samples, 0.06%)</title><rect x="99.9324%" y="213" width="0.0601%" height="15" fill="rgb(211,51,23)" fg:x="13299" fg:w="8"/><text x="100.1824%" y="223.50"></text></g><g><title>all (13,308 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(247,221,28)" fg:x="0" fg:w="13308"/><text x="0.2500%" y="335.50"></text></g><g><title>dyld`start (13,308 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(251,222,45)" fg:x="0" fg:w="13308"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>sokobond-express`main (13,308 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(217,162,53)" fg:x="0" fg:w="13308"/><text x="0.2500%" y="303.50">sokobond-express`main</text></g><g><title>sokobond-express`std::rt::lang_start_internal (13,308 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(229,93,14)" fg:x="0" fg:w="13308"/><text x="0.2500%" y="287.50">sokobond-express`std::rt::lang_start_internal</text></g><g><title>sokobond-express`std::rt::lang_start::_{{closure}} (13,308 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(209,67,49)" fg:x="0" fg:w="13308"/><text x="0.2500%" y="271.50">sokobond-express`std::rt::lang_start::_{{closure}}</text></g><g><title>sokobond-express`std::sys::backtrace::__rust_begin_short_backtrace (13,308 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(213,87,29)" fg:x="0" fg:w="13308"/><text x="0.2500%" y="255.50">sokobond-express`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>sokobond-express`sokobond_express::main (13,304 samples, 99.97%)</title><rect x="0.0301%" y="229" width="99.9699%" height="15" fill="rgb(205,151,52)" fg:x="4" fg:w="13304"/><text x="0.2801%" y="239.50">sokobond-express`sokobond_express::main</text></g></svg></svg>